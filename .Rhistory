response_path = paste0("features/alex_phenotypes_",as.character(args),".RData"), # path to response
submission = F,
kfold = 10,
method = c("dnn"),
hyperparam = NULL, #list(c(NULL,NULL)), #list(c(333),c(500)), # c("alpha"=0.5),
cvglm = T,
returnFit = T, # if false, then it only returns the lambda
cvseed = 1 #args # supply the parallel processing counter
)
gadsg
a
ga
auc <- auc[,1:2]
dump_features(auc, path = paste0("features/alex_phenotypes_",as.character(args),".RData"))
args
?trainControl
source('~/research/dream_aml/R/learning.R')
models_list <- run_pipeline_benchmark(
feature_path = "features/alex_features.RData", # path to features
response_path = paste0("features/alex_phenotypes_",as.character(args),".RData"), # path to response
submission = F,
kfold = 10,
method = c("rf"),
hyperparam = list(c(NULL),c(NULL)), #list(c(333),c(500)), # c("alpha"=0.5),
cvglm = T,
returnFit = T, # if false, then it only returns the lambda
cvseed = 1 #args # supply the parallel processing counter
)
head(test$score)
test <- loadRData("~/research/dream_aml/metadata/alex/glm_test_instance1.RData")
dim(test)
test$score
ComplexHeatmap()test$score)
ComplexHeatmap(test$score)
library(ComplexHeatmap)
Heatmap(test$score)
is.na(test$score)
Heatmap(test$score)
View(test$score)
test$score[is.na(test$score)] <- 0
Heatmap(test$score)
test <- loadRData("~/research/dream_aml/metadata/alex/glm_test_instance1.RData")
mean(test%>%unlist)
mean(na.omit(test%>%unlist))
na.omit(test%>%unlist)
na.omit(test%>%unlist) %>% as.numeric()
na.omit(test$score%>%unlist) %>% as.numeric()
na.omit(test$score%>%unlist)
test$score
test$score %>% unlist
na.omit)test$score)
na.omit(test$score)
na.omit(test$score) %>% mean
as.matrix(test$score)
as.matrix(test$score) %%> unlist
as.matrix(test$score) %>% unlist
as.matrix(test$score) %>% unlist %>% mean
as.matrix(test$score) %>% unlist %>% na.omit %>%mean
as.matrix(test$score)
as.matrix(test$score)
apply(as.matrix(test$score), 1,mean)
apply(as.matrix(test$score), 1,function(x) mean(na.omit(x)))
apply(as.matrix(test$score), 1,function(x) mean(na.omit(x))) %>% mean
?cor
source('~/research/dream_aml/R/learning.R')
apply(as.matrix(test$score), 2,function(x) mean(na.omit(x)))
apply(as.matrix(test$score), 2,function(x) mean(na.omit(x))) %>% hist
apply(as.matrix(test$score), 2,function(x) mean(na.omit(x)))
apply(as.matrix(test$score), 2,function(x) mean(na.omit(x)))
test1 <0- apply(as.matrix(test$score), 2,function(x) mean(na.omit(x)))
test1 <- apply(as.matrix(test$score), 2,function(x) mean(na.omit(x)))
ttest
test1
test1 <0
test1[test1 <0] <- 0
test1
test1 %>% mean
test1
test1[test1 == NaN]
test1[test1 == "NaN"]
test1[is.na(test1)]
test1[is.na(test1)] <- 0
test1
test1 %>% mean
test
test$score
apply(test$score, 1, mean)
apply(test$score, 2, mean)
apply(test$score, 2, function(x) mean(na.omit(x)))
test1 <0 apply(test$score, 2, function(x) mean(na.omit(x)))
test1 <- apply(test$score, 2, function(x) mean(na.omit(x)))
test1[is.na(test1) & test1 <0 ] <- 0
test1
test1[is.na(test1) | test1 <0 ] <- 0
test1
hist(test1)
mean(test1)
source('~/research/dream_aml/R/learning.R')
dev.off()
rna <- get_features(feature_path)
## note that our docker image is using r3.6.1
source("R/learning.R")
source("R/run_pipeline.R")
source("R/select_gene_sc1.R")
source("R/algorithms.R")
source("R/general.R")
feature_path = paste0("features/",directory,"/",descriptor,"_features.RData") # path to features
directory <- "mut" #"rna"
descriptor <- "mut" #"rna"
feature_path = paste0("features/",directory,"/",descriptor,"_features.RData") # path to features
response_path = paste0("features/",directory,"/",descriptor,"_response.RData") # path to response
rna <- get_features(feature_path)
auc <- get_features(response_path)
dump_features(rna, path = paste0("features/",directory,"/",descriptor,"_features.RData"))
dim(auc)
dim(RNA)
dim(rna)
h2o.init
h2o.init()
h2o.init(min_mem_size = 20G)
h2o.init(min_mem_size = "20G")
h2o.shutdown()
h2o.init(min_mem_size = "20G")
h2o.shutdown(prompt = D)
h2o.shutdown(prompt = F)
source('/storage/groups/cbm01/workspace/dream_aml/R/learning.R')
library(rJava)
#!/usr/bin/env Rscript
setwd("/storage/groups/cbm01/workspace/dream_aml/")
args <- as.numeric(commandArgs(trailingOnly = TRUE)); args <- args # get the submission script argument
print("Arguments:")
print(args)
## Alex' Models
## note that our docker image is using r3.6.1
source("R/learning.R")
source("R/run_pipeline.R")
source("R/select_gene_sc1.R")
source("R/algorithms.R")
source("R/general.R")
#### SUBMISSION
# ./SUBMIT.sh alex_pipeline.R 8 5 <- old command
# ./SUBMIT.sh alex_pipeline.R 40 1
###############
#args <- (args[2]-1)*8+args[1] #8=number of jobs per array
args <- args[2] #<- new command
print(paste0("Running with argument: ",as.character(args)))
numberofargs <- 8*5 # if sequential, set to 1
args
args <- 1
directory <- "mut" #"rna"
descriptor <- "mut" #"rna"
feature_path = paste0("features/",directory,"/",descriptor,"_features.RData") # path to features
response_path = paste0("features/",directory,"/",descriptor,"_response.RData") # path to response
rna <- get_features(feature_path)
auc <- get_features(response_path)
dump_features(rna, path = paste0("features/",directory,"/",descriptor,"_features.RData"))
dump_features(auc, path = paste0("features/",directory,"/",descriptor,"_response.RData"))
auc <- cut_df(auc, numberofargs,args)
dump_features(auc, path = paste0("features/",directory,"/",descriptor,"_response_",as.character(args),".RData"))
models_list <- run_pipeline_benchmark(
feature_path = paste0("features/",directory,"/",descriptor,"_features.RData"), # path to features
response_path = paste0("features/",directory,"/",descriptor,"_response_",as.character(args),".RData"), # path to response
submission = T,
kfold = 10,
method = c("dnn"),
hyperparam = list(c(NULL),c(NULL)), #list(c(333),c(500)), # c("alpha"=0.5),
cvglm = T,
returnFit = T, # if false, then it only returns the lambda
cvseed = 1,
args = args
#FUN = AnvSigNumFeature
)
save(models_list, file = paste0("outputs/",directory,"/","dnn_","default._10fold_cvseed1_instance",as.character(args),"_test.RData"))
########### FURTHER STEPS FOR BUILDING THE FULL MODEL
# You can do these things also in a separate scripts, since these are not that computationally heavy
if(FALSE){
lambda_min <- lambda_min(
pipeline_object = models_list # the object created from the pipeline object, only works if returnFit=F
)
final_model_list <- run_pipeline_final(
feature_path = paste0("features/",directory,"/",descriptor,"_features.RData"), # path to features
response_path = paste0("features/",directory,"/",descriptor,"_response.RData"), # path to response
submission = T,
FUN = function(x){return(x)},
method = "glm",
hyperparam = c("alpha"=0.5)
)
# you can "predict(final_model_list[[1]], s = lambda_min[[1]], newx=blablala)" for choosing lambda with optimal cv-score
}
warnings()
args
args<-2
auc <- cut_df(auc, numberofargs,args)
dump_features(auc, path = paste0("features/",directory,"/",descriptor,"_response_",as.character(args),".RData"))
models_list <- run_pipeline_benchmark(
feature_path = paste0("features/",directory,"/",descriptor,"_features.RData"), # path to features
response_path = paste0("features/",directory,"/",descriptor,"_response_",as.character(args),".RData"), # path to response
submission = T,
kfold = 10,
method = c("dnn"),
hyperparam = list(c(NULL),c(NULL)), #list(c(333),c(500)), # c("alpha"=0.5),
cvglm = T,
returnFit = T, # if false, then it only returns the lambda
cvseed = 1,
args = args
#FUN = AnvSigNumFeature
)
feature_path = paste0("features/",directory,"/",descriptor,"_features.RData") # path to features
response_path = paste0("features/",directory,"/",descriptor,"_response.RData") # path to response
rna <- get_features(feature_path)
auc <- get_features(response_path)
dump_features(rna, path = paste0("features/",directory,"/",descriptor,"_features.RData"))
dump_features(auc, path = paste0("features/",directory,"/",descriptor,"_response.RData"))
auc <- cut_df(auc, numberofargs,args)
dump_features(auc, path = paste0("features/",directory,"/",descriptor,"_response_",as.character(args),".RData"))
models_list <- run_pipeline_benchmark(
feature_path = paste0("features/",directory,"/",descriptor,"_features.RData"), # path to features
response_path = paste0("features/",directory,"/",descriptor,"_response_",as.character(args),".RData"), # path to response
submission = T,
kfold = 10,
method = c("dnn"),
hyperparam = list(c(NULL),c(NULL)), #list(c(333),c(500)), # c("alpha"=0.5),
cvglm = T,
returnFit = T, # if false, then it only returns the lambda
cvseed = 1,
args = args
#FUN = AnvSigNumFeature
)
save(models_list, file = paste0("outputs/",directory,"/","dnn_","default._10fold_cvseed1_instance",as.character(args),"_test.RData"))
source('/storage/groups/cbm01/workspace/dream_aml/R/learning.R')
source('/storage/groups/cbm01/workspace/dream_aml/R/learning.R')
load("/storage/groups/cbm01/workspace/dream_aml/outputs/mut/dnn_default._10fold_cvseed1_instance1_test.RData")
load("/storage/groups/cbm01/workspace/dream_aml/outputs/mut/dnn_default._10fold_cvseed1_instance1_test.RData")
models_list$score
models_list$param
models_list$param$V1
models_list$param$V1[[1]][[1]]
models_list$param$V1[[1]]
models_list$param$V1[[1]][[1]]
models_list$param$V1[[1]][[1]]@model
rm(args)
#### SUBMISSION
# ./SUBMIT.sh alex_pipeline.R 8 5 <- old command
# ./SUBMIT.sh alex_pipeline.R 40 1
###############
#args <- (args[2]-1)*8+args[1] #8=number of jobs per array
args <- args[2] #<- new command
import_cv_results <- function(
###
#####################################################
partial_path = NULL # pattern to match the path to the different instances
){
files <- list.files(pattern = patrial_path)
return(files)
}######################################################
import_cv_results(partial_path = paste0("outputs/",directory,"/","dnn_","default._"))
import_cv_results <- function(
###
#####################################################
partial_path = NULL # pattern to match the path to the different instances
){
files <- list.files(pattern = partial_path)
return(files)
}######################################################
import_cv_results(partial_path = paste0("outputs/",directory,"/","dnn_","default._"))
import_cv_results <- function(
###
#####################################################
partial_path = NULL # pattern to match the path to the different instances
){
files <- list.files(pattern = partial_path)
return(files)
}######################################################
import_cv_results(partial_path = paste0("outputs/",directory,"/","dnn_","default._"))
paste0("outputs/",directory,"/","dnn_","default._")
import_cv_results <- function(
###
#####################################################
partial_path = NULL, # pattern to match the path to the different instances
directory = NULL
){
files <- list.files(pattern = partial_path, path = directory)
return(files)
}######################################################
import_cv_results(partial_path = paste0("dnn_","default._"),
directory = paste0("outputs/",directory)
)
import_cv_results <- function(
###
#####################################################
partial_path = NULL, # pattern to match the path to the different instances
directory = NULL
){
files <- list.files(pattern = partial_path, path = directory)
return(sort(files))
}######################################################
import_cv_results(partial_path = paste0("dnn_","default._"),
directory = paste0("outputs/",directory)
)
source('/storage/groups/cbm01/workspace/dream_aml/R/general.R')
import_cv_results <- function(
###
#####################################################
partial_path = NULL, # pattern to match the path to the different instances
directory = NULL
){
files <- list.files(pattern = partial_path, path = directory)
return(mixedsort(files))
}######################################################
import_cv_results(partial_path = paste0("dnn_","default._"),
directory = paste0("outputs/",directory)
)
test <- loadRData("output/mut/dnn_default._10fold_cvseed1_instance1_test.RData"")
)
qreg
q
qweg
eq""
qerrgqe
test <- loadRData("output/mut/dnn_default._10fold_cvseed1_instance1_test.RData)
c'")'
=-weTQ42=
51
c''"
test <- loadRData("output/mut/dnn_default._10fold_cvseed1_instance1_test.RData")
test <- loadRData("outputs/mut/dnn_default._10fold_cvseed1_instance1_test.RData")
test
str(test)
test$gene_names_filtered
test$gene_names_filtered %>% LEGNTH
test$gene_names_filtered %>% legnth
test$gene_names_filtered %>% length
test$gene_names_filtered %>% length
length(test)
test$score %>% dim
object <- test
cum_object <- object
cum_object$param
cum_object$param %>% str
length(object$param)
View(cum_object$param %>% str )
View(cum_object$param)
cum_object$cv %>% View
cum_object$returnFit
import_cv_results <- function(
###
#####################################################
partial_path = NULL, # pattern to match the path to the different instances
directory = NULL
){
files <- list.files(pattern = partial_path, path = directory)
cum_object <- list()
for( file in files ){
object <- loadRData(paste0(directory,file))
count <- 1
if(count >1){
cum_object$score <- cbind(cum_object$score, object$score)
cum_object$param <- cbind(cum_object$param, object$param)
cum_object$gene_names_filtered <- cbind(cum_object$gene_names_filtered, object$gene_names_filtered)
} else {
cum_object <- object
}
count <- count +1
}
return(mixedsort(files))
}
import_cv_results <- function(
###
#####################################################
partial_path = NULL, # pattern to match the path to the different instances
directory = NULL
){
files <- mixedsort(list.files(pattern = partial_path, path = directory))
cum_object <- list()
for( file in files ){
object <- loadRData(paste0(directory,file))
count <- 1
if(count >1){
cum_object$score <- cbind(cum_object$score, object$score)
cum_object$param <- cbind(cum_object$param, object$param)
cum_object$gene_names_filtered <- cbind(cum_object$gene_names_filtered, object$gene_names_filtered)
} else {
cum_object <- object
}
count <- count +1
}
return(cum_object)
}######################################################
rm(cum_object)
rm(object)
import_cv_results(partial_path = paste0("dnn_","default._"),
directory = paste0("outputs/",directory)
)
import_cv_results <- function(
###
#####################################################
partial_path = NULL, # pattern to match the path to the different instances
directory = NULL
){
files <- mixedsort(list.files(pattern = partial_path, path = directory))
cum_object <- list()
for( file in files ){
print(paste0(directory,file))
object <- loadRData(paste0(directory,file))
count <- 1
if(count >1){
cum_object$score <- cbind(cum_object$score, object$score)
cum_object$param <- cbind(cum_object$param, object$param)
cum_object$gene_names_filtered <- cbind(cum_object$gene_names_filtered, object$gene_names_filtered)
} else {
cum_object <- object
}
count <- count +1
}
return(cum_object)
}
import_cv_results(partial_path = paste0("dnn_","default._"),
directory = paste0("outputs/",directory)
)
import_cv_results <- function(
###
#####################################################
partial_path = NULL, # pattern to match the path to the different instances
directory = NULL
){
files <- mixedsort(list.files(pattern = partial_path, path = directory))
cum_object <- list()
for( file in files ){
object <- loadRData(paste0(directory,"/",file))
count <- 1
if(count >1){
cum_object$score <- cbind(cum_object$score, object$score)
cum_object$param <- cbind(cum_object$param, object$param)
cum_object$gene_names_filtered <- cbind(cum_object$gene_names_filtered, object$gene_names_filtered)
} else {
cum_object <- object
}
count <- count +1
}
return(cum_object)
}
import_cv_results(partial_path = paste0("dnn_","default._"),
directory = paste0("outputs/",directory)
)
test1 <- import_cv_results(partial_path = paste0("dnn_","default._"),
directory = paste0("outputs/",directory)
)
dim(test1$score)
import_cv_results <- function(
###
#####################################################
partial_path = NULL, # pattern to match the path to the different instances
directory = NULL
){
files <- mixedsort(list.files(pattern = partial_path, path = directory))
cum_object <- list()
for( file in files ){
object <- loadRData(paste0(directory,"/",file))
count <- 1
print(count)
if(count >1){
cum_object$score <- cbind(cum_object$score, object$score)
cum_object$param <- cbind(cum_object$param, object$param)
cum_object$gene_names_filtered <- cbind(cum_object$gene_names_filtered, object$gene_names_filtered)
} else {
cum_object <- object
}
count <- count +1
}
return(cum_object)
}
test1 <- import_cv_results(partial_path = paste0("dnn_","default._"),
directory = paste0("outputs/",directory)
)
import_cv_results <- function(
###
#####################################################
partial_path = NULL, # pattern to match the path to the different instances
directory = NULL
){
files <- mixedsort(list.files(pattern = partial_path, path = directory))
cum_object <- list()
count <- 1
for( file in files ){
object <- loadRData(paste0(directory,"/",file))
print(count)
if(count >1){
cum_object$score <- cbind(cum_object$score, object$score)
cum_object$param <- cbind(cum_object$param, object$param)
cum_object$gene_names_filtered <- cbind(cum_object$gene_names_filtered, object$gene_names_filtered)
} else {
cum_object <- object
}
count <- count +1
}
return(cum_object)
}
test1 <- import_cv_results(
partial_path = paste0("dnn_","default._"),
directory = paste0("outputs/",directory)
)
dim(test1$score)
dim(auc)
auc <- get_features(response_path)
dim(auc)
length(test1$param)
dim(test1$param)
source('/storage/groups/cbm01/workspace/dream_aml/R/general.R')
source('/storage/groups/cbm01/workspace/dream_aml/R/general.R')
source('/storage/groups/cbm01/workspace/dream_aml/R/general.R')
rm(test1)
source('/storage/groups/cbm01/workspace/dream_aml/R/learning.R')
