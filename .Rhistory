source("/storage/groups/cbm01/workspace/dream_aml/R/algorithms.R")
source("/storage/groups/cbm01/workspace/dream_aml/R/learning.R")
source("/storage/groups/cbm01/workspace/dream_aml/R/run_pipeline.R")
source("/storage/groups/cbm01/workspace/dream_aml/R/general.R")
anno <- read.csv("sample_annotation_212_plus_195_samples_20200526.csv")
head(anno)
meth <- read.csv("M.norm")
dim(meth)
head(meth)
meth <- read.csv("M.norm", sep = " ")
dim(meth)
hist(unlist(meth))
?apply
meth_sds <- apply(meth, 1, sd)
hist(meth_sds)
sort(meth_sds, decreasing = T)[10000]
sort(meth_sds, decreasing = T)[50000]
colnames(meth)
row.names(meth)[1:10]
anno$SampleName
anno$Sentrix_ID
View(anno)
colnames(meth)
anno$SampleName
anno$Sentrix_ID %>% as.character
anno$Sentrix_ID %>% as.numeric
as.numeric(anno$Sentrix_ID , scientific = F)
format(anno$Sentrix_ID , scientific = F)
anno$Sentrix_ID
r
source("/storage/groups/cbm01/workspace/dream_aml/R/algorithms.R")
source("/storage/groups/cbm01/workspace/dream_aml/R/learning.R")
source("/storage/groups/cbm01/workspace/dream_aml/R/run_pipeline.R")
source("/storage/groups/cbm01/workspace/dream_aml/R/general.R")
source("feature_selection.R")
k <- 1
models_list <- list()
i <- 1
models_list[[i]] <- run_pipeline_benchmark(
feature_path = paste0("metadata/features.RData"),
response_path = paste0("metadata/response.RData"),
submission = F,
kfold = 10,
method = "cox",
hyperparam = list(alpha = seq(0,1,0.1), lambda = exp(seq(-6, -0.8, 0.05))), #c(alpha=0.5)
cvglm = T,
returnFit = T,
cvseed = i,
#FUN = AnvSigSurvFeature,
null.model = F
);
source('/storage/groups/cbm01/workspace/dream_aml/R/algorithms.R')
models_list[[i]] <- run_pipeline_benchmark(
feature_path = paste0("metadata/features.RData"),
response_path = paste0("metadata/response.RData"),
submission = F,
kfold = 10,
method = "cox",
hyperparam = list(alpha = seq(0,1,0.1), lambda = exp(seq(-6, -0.8, 0.05))), #c(alpha=0.5)
cvglm = T,
returnFit = T,
cvseed = i,
#FUN = AnvSigSurvFeature,
null.model = F
);
source('/storage/groups/cbm01/workspace/dream_aml/R/algorithms.R')
View(train)
View(caret::train)
View(caret::train.default)
View(train.default)
View(evalSummaryFunction)
View(caret""evalSummaryFunction)
View(caret::evalSummaryFunction)
source('/storage/groups/cbm01/workspace/dream_aml/R/algorithms.R')
library(mlr)
BiocManager::install("mlr",lib = "~/R/x86_64-redhat-linux-gnu-library/3.6")
library("mlr",lib.loc = "~/R/x86_64-redhat-linux-gnu-library/3.6")
BiocManager::install("ParamHelpers",lib = "~/R/x86_64-redhat-linux-gnu-library/3.6")
library("ParamHelpers",lib.loc = "~/R/x86_64-redhat-linux-gnu-library/3.6")
library("mlr",lib.loc = "~/R/x86_64-redhat-linux-gnu-library/3.6")
source('/storage/groups/cbm01/workspace/dream_aml/R/algorithms.R')
source('/storage/groups/cbm01/workspace/dream_aml/R/algorithms.R')
source('/storage/groups/cbm01/workspace/dream_aml/R/algorithms.R')
source('/storage/groups/cbm01/workspace/dream_aml/R/algorithms.R')
mtry <- c(10,20,40,70,seq(from= 100, to= 1000, by= 100))
ntree <- c(100, 200, 500, 1000)
grid <- expand_grid(mtry, ntree)%>%as.data.frame
#param <- list(mtry,ntree)
param <- lapply(1:nrow(grid), function(x) list(grid[x,1],grid[x,2]))[[args]]
lapply(1:nrow(grid), function(x) list(grid[x,1],grid[x,2]))[[1]]
# CCLE validation
path <- "/storage/groups/cbm01/workspace/alexander.ohnmacht/BEST/data/CCLE/"
source("R/create_CCLE.R")
source("R/script_params.R")
library(tidyverse)
chr_names <- read.csv("/storage/groups/cbm01/workspace/alexander.ohnmacht/BEST/ananth/chr_names.txt", sep = "\t", header = F) %>% # for mapping NCBI to UCSC chromosomes
mutate(V1 = as.character(V1)) %>% mutate(V2 = as.character(V2)); chr_names$V2[chr_names$V2 == ""] <- "none"
load("/storage/groups/cbm01/workspace/alexander.ohnmacht/BEST/df_genomics_nrow_7898.RData")
dim(df)
msamples <- read.csv(paste0(path,"SraRunTable.txt"))
ccle <- init_annotations_preprocess(path.to.drugs_original = path,
path.to.cosmic = "data/cosmic.RData")
msamples$name <- toupper(gsub(" ","",gsub("[[:punct:]]", "", msamples$Cell_Line)))
ccle$cl_info$meth <- lapply(ccle$cl_info$ccl_name, function(x) paste0("",as.character(msamples$Run[msamples$name == x & !is.na(msamples$name)]))) %>% unlist
not_in_gdsc <- row.names(ccle$resp[["OV"]])[lapply(row.names(ccle$resp[["OV"]]), function(x) ccle$cl_info$tissue_gdsc[ccle$cl_info$master_ccl_id == x] != "OV")%>%as.character == "TRUE"]
not_in_gdsc <- unlist(lapply(not_in_gdsc, function(x) ccle$cl_info$ccl_name[ccle$cl_info$master_ccl_id == x]%>%as.character))
# CCLE validation
path <- "/storage/groups/cbm01/workspace/alexander.ohnmacht/BEST/data/CCLE/"
source("R/create_CCLE.R")
source("R/script_params.R")
library(tidyverse)
chr_names <- read.csv("/storage/groups/cbm01/workspace/alexander.ohnmacht/BEST/ananth/chr_names.txt", sep = "\t", header = F) %>% # for mapping NCBI to UCSC chromosomes
mutate(V1 = as.character(V1)) %>% mutate(V2 = as.character(V2)); chr_names$V2[chr_names$V2 == ""] <- "none"
load("/storage/groups/cbm01/workspace/alexander.ohnmacht/BEST/df_genomics_nrow_7898.RData")
dim(df)
msamples <- read.csv(paste0(path,"SraRunTable.txt"))
ccle <- init_annotations_preprocess(path.to.drugs_original = path,
path.to.cosmic = "data/cosmic.RData")
msamples$name <- toupper(gsub(" ","",gsub("[[:punct:]]", "", msamples$Cell_Line)))
ccle$cl_info$meth <- lapply(ccle$cl_info$ccl_name, function(x) paste0("",as.character(msamples$Run[msamples$name == x & !is.na(msamples$name)]))) %>% unlist
not_in_gdsc <- row.names(ccle$resp[["OV"]])[lapply(row.names(ccle$resp[["OV"]]), function(x) ccle$cl_info$tissue_gdsc[ccle$cl_info$master_ccl_id == x] != "OV")%>%as.character == "TRUE"]
not_in_gdsc <- unlist(lapply(not_in_gdsc, function(x) ccle$cl_info$ccl_name[ccle$cl_info$master_ccl_id == x]%>%as.character))
samples <- msamples$Run[which(msamples$name %in% not_in_gdsc)]%>%as.character;cat(samples) # only samples not in gdsc
### Select all methylation samples for all cancer types cancertypes
samples <- lapply(
types,
function(type) msamples$Run[which(msamples$name %in% unlist(lapply(row.names(ccle$resp[[type]]), function(x) ccle$cl_info$ccl_name[ccle$cl_info$master_ccl_id == x]%>%as.character)))]%>%as.character
); names(samples)=types;samples
cat(samples$NB)
samples
names(smaples)
names(samples)
samples[names(samples) %in% c("OV","NB")]
samples[!names(samples) %in% c("OV","NB")]
cat(unlist(samples[!names(samples) %in% c("OV","NB")]))
length(unlist(samples[!names(samples) %in% c("OV","NB")]))
cat(unlist(samples[!names(samples) %in% c("OV","NB")])[1:100])
### trees for meth-gex
library(mgcv)
library(gratia, lib.loc = "/home/alexander.ohnmacht/R/x86_64-redhat-linux-gnu-library/3.6")
library("amap", lib.loc = "~/R/x86_64-redhat-linux-gnu-library/3.6/")
load("/storage/groups/cbm01/workspace/alexander.ohnmacht/BEST/df_genomics_nrow_7898.RData")
library(dplyr)
scores<-c();sd<-c();betas<-list();for(i in done[!is.na(done)]){
load(file = paste0("dfg/results_regression/rna_var5000_mostcor400//res",as.character(i)))
#hist(unlist(lapply(list_res[[1]]$RES, function(x) x["perform_all"])))
scores[i] <- unlist(lapply(list_res[[1]]$RES, function(x) x["perform_all"])) %>% mean
sd[i] <- unlist(lapply(list_res[[1]]$RES, function(x) x["perform_all"])) %>% sd
betas[[i]] <- list_res[[1]][["response"]]
}; scores_save <- scores
### Computes anovas and linear models
### PREDICTION
setwd("/storage/groups/cbm01/workspace/dream_aml/") # make this not manual
args <- as.numeric(commandArgs(trailingOnly = TRUE)) # args <- 1
args <- args[1]
message(paste("Arguments:",args))
source("R/algorithms.R")
source("R/learning.R")
source("R/run_pipeline.R")
source("R/general.R")
source("dfg/feature_selection.R")
library(doParallel)
source("R/general.R")
#######################
load(file = paste0("dfg/results_regression/res",as.character(i)))
scores<-c();sd<-c();betas<-list();for(i in done[!is.na(done)]){
load(file = paste0("dfg/results_regression/res",as.character(i)))
#hist(unlist(lapply(list_res[[1]]$RES, function(x) x["perform_all"])))
scores[i] <- unlist(lapply(list_res[[1]]$RES, function(x) x["perform_all"])) %>% mean
sd[i] <- unlist(lapply(list_res[[1]]$RES, function(x) x["perform_all"])) %>% sd
betas[[i]] <- list_res[[1]][["response"]]
}; scores_save <- scores
hist(scores)
### Linear models
ic_matrix <- get_features("dfg/metadata/ic_matrix.RData")
rna_matrix <- get_features("dfg/metadata/rna_matrix.RData")
apply(rna_matrix, 1, mean)
apply(rna_matrix, 1, mean) %>% hist
apply(rna_matrix, 2, mean) %>% hist
hist(scores)
### Linear models
ic_matrix <- get_features("dfg/metadata/ic_matrix.RData")
rna_matrix <- get_features("dfg/metadata/rna_matrix.RData")
###
done <- gsub("res","",list.files("dfg/results_regression/"))%>%as.numeric
arg_list <- 1:ncol(ic_matrix)
arg_list <- arg_list[!arg_list %in% done]
args <- arg_list[args] # assign new args
list_res<-list();for(k in 1:1){ # for each data type, only one here
models_list <- list()
for(i in 1:30){ # resampling
models_list[[i]] <- run_pipeline_benchmark(
feature_path = paste0("dfg/metadata/rna_matrix.RData"),
response_path = paste0("dfg/metadata/ic_matrix.RData"),
submission = F,
kfold = 5,
method = "glm",
hyperparam = list(alpha = seq(0,1,0.1), lambda = exp(seq(-1, 2.5, 0.05))),
cvglm = T,
returnFit = T,
cvseed = i,
FUN = AnvSigNumFeature,
null.model = F,
args = args
);
# this only works here for one drug per run
predictions <- list();pred <- list();
for(j in 1:length(models_list[[i]]$model)){ # fold
pred[[j]] <- predict(object = models_list[[1]]$model[[j]]$param[[1]][[1]]$finalModel, rna_matrix[models_list[[i]]$cv$test_sets[[j]],unlist(models_list[[i]]$model[[j]]$gene_names_filtered),drop=F], s=models_list[[1]]$model[[j]]$param[[1]][[1]]$finalModel$lambdaOpt)
}; predictions <- merge(do.call(rbind, pred), ic_matrix[,args, drop = F], by = 0, all = T)%>%column_to_rownames("Row.names");
models_list[[i]]$pred <- predictions
}#i
if(T){ # old performance assessment
#lapply(models_list, function(x) x[["score"]])
for(i in 1:length(models_list)){
score <- lapply(1:length(models_list[[1]]$model), function(x) models_list[[1]]$model[[x]]$score) %>% unlist
models_list[[i]]$perform_fold <- score
}
}
if(T){
score_all<-c();for(i in 1:length(models_list)){
score <- cor(models_list[[i]][["pred"]],method = "spearman")%>%min%>%unlist
models_list[[i]]$perform_all <- score
}
}
list_res[[k]] <- list()
#list_res[[k]]["performance"] <- as.data.frame(data.frame(mean(score),sd(score)/sqrt(length(score)), mean(score2), sd(score2)/sqrt(length(score2)))%>%t)
list_res[[k]][["RES"]] <- models_list
#lambda_min <- apply(models_list$param, 2,function(x) median(x))[1]; lambda_min
for(i in 1:length(models_list)){
for(j in 1:length(models_list[[1]]$model)){
fit <- models_list[[i]]$model[[j]]$param[[1]][[1]]
beta <- coef(fit$finalModel, s = fit$finalModel$lambdaOpt)
#beta <- beta[as.logical(beta!=0),, drop=F]
#plot(fit, xvar = "lambda"); abline(v=log(lambda_min), col="darkred")
beta <- beta[-1,]
if(i ==1 & j == 1){beta_df <- as.data.frame(beta)}
beta_df <- cbind(beta_df,beta)
}
}
beta_df$mean <- apply(beta_df, 1, mean)
beta_df$sd <- apply(beta_df, 1, function(x) sd(x))#sd(x)/sqrt(length(x)-1))
beta_df$gene <- row.names(beta_df)
beta_hits <- beta_df[abs(beta_df$mean)>0,]
beta_df <- beta_df[abs(beta_df$mean)-beta_df$sd>0,]
list_res[[k]][["response"]] <- beta_hits
}
i
args <- 1
models_list[[i]] <- run_pipeline_benchmark(
feature_path = paste0("dfg/metadata/rna_matrix.RData"),
response_path = paste0("dfg/metadata/ic_matrix.RData"),
submission = F,
kfold = 5,
method = "glm",
hyperparam = list(alpha = seq(0,1,0.1), lambda = exp(seq(-1, 2.5, 0.05))),
cvglm = T,
returnFit = T,
cvseed = i,
FUN = AnvSigNumFeature,
null.model = F,
args = args
);
models_list[[i]] <- run_pipeline_benchmark(
feature_path = paste0("dfg/metadata/rna_matrix.RData"),
response_path = paste0("dfg/metadata/ic_matrix.RData"),
submission = F,
kfold = 5,
method = "glm",
hyperparam = c("alpha" = 1), #list(alpha = seq(0,1,0.1), lambda = exp(seq(-1, 2.5, 0.05))),
cvglm = T,
returnFit = T,
cvseed = i,
FUN = AnvSigNumFeature,
null.model = F,
args = args
);
models_list[[1]]
models_list[[1]]$model
models_list[[1]]$model[[1]]$param[[1]][[1]]$lambda
exp(seq(-1, 2.5, 0.05)))
exp(seq(-1, 2.5, 0.05))
models_list[[2]]$model[[1]]$param[[1]][[1]]$lambda
models_list[[1]]$model[[2]]$param[[1]][[1]]$lambda
exp(seq(-5, 2.5, 0.05))
exp(seq(-6, 2.5, 0.05))
exp(seq(-5.2, 2.5, 0.05))
models_list[[1]]$model[[3]]$param[[1]][[1]]$lambda
exp(seq(-5.2, 2.5, 0.05))
exp(seq(-5.2, 1, 0.05))
exp(seq(-5.2, 0.5, 0.05))
exp(seq(-5.2, 0.2, 0.05))
exp(seq(-5.2, 0, 0.05))
exp(seq(-5.2, -1, 0.05))
exp(seq(-5.2, -0.5, 0.05))
exp(seq(-5.2, -0.3, 0.05))
models_list[[1]]$model[[4]]$param[[1]][[1]]$lambda
exp(seq(-5.2, -0.3, 0.05))
list(alpha = seq(0,1,0.1), lambda = exp(seq(-5.2, -0.3, 0.05)))
