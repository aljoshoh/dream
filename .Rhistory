<<<<<<< HEAD
source('~/r-studio-charliecloud-master-b76b94e8c5040cd58fb0ffd1a463fd7409bb886e/dockerfile_dream_aml_sc1/input_data_functions.R')
import_dnaseq("~/research/dream_aml/dream_data_leaderboard/dnaseq.csv")
source('~/r-studio-charliecloud-master-b76b94e8c5040cd58fb0ffd1a463fd7409bb886e/dockerfile_dream_aml_sc1/input_data_functions.R')
import_dnaseq("~/research/dream_aml/dream_data_leaderboard/dnaseq.csv")
source('~/r-studio-charliecloud-master-b76b94e8c5040cd58fb0ffd1a463fd7409bb886e/dockerfile_dream_aml_sc1/input_data_functions.R')
import_dnaseq("~/research/dream_aml/dream_data_leaderboard/dnaseq.csv")
source('~/r-studio-charliecloud-master-b76b94e8c5040cd58fb0ffd1a463fd7409bb886e/dockerfile_dream_aml_sc1/input_data_functions.R')
import_dnaseq("~/research/dream_aml/dream_data_leaderboard/dnaseq.csv")
source('~/r-studio-charliecloud-master-b76b94e8c5040cd58fb0ffd1a463fd7409bb886e/dockerfile_dream_aml_sc1/input_data_functions.R')
import_dnaseq("~/research/dream_aml/dream_data_leaderboard/dnaseq.csv")
source('~/r-studio-charliecloud-master-b76b94e8c5040cd58fb0ffd1a463fd7409bb886e/dockerfile_dream_aml_sc1/input_data_functions.R')
source('~/r-studio-charliecloud-master-b76b94e8c5040cd58fb0ffd1a463fd7409bb886e/dockerfile_dream_aml_sc1/input_data_functions.R')
source('~/r-studio-charliecloud-master-b76b94e8c5040cd58fb0ffd1a463fd7409bb886e/dockerfile_dream_aml_sc1/input_data_functions.R')
source('~/r-studio-charliecloud-master-b76b94e8c5040cd58fb0ffd1a463fd7409bb886e/dockerfile_dream_aml_sc1/input_data_functions.R')
source('~/r-studio-charliecloud-master-b76b94e8c5040cd58fb0ffd1a463fd7409bb886e/dockerfile_dream_aml_sc1/input_data_functions.R')
source('~/r-studio-charliecloud-master-b76b94e8c5040cd58fb0ffd1a463fd7409bb886e/dockerfile_dream_aml_sc1/input_data_functions.R')
source('~/r-studio-charliecloud-master-b76b94e8c5040cd58fb0ffd1a463fd7409bb886e/dockerfile_dream_aml_sc1/input_data_functions.R')
as.data.frame(0, matrix(ncol = length(not_in_data), nrow = nrow(mut)))
source('~/r-studio-charliecloud-master-b76b94e8c5040cd58fb0ffd1a463fd7409bb886e/dockerfile_dream_aml_sc1/input_data_functions.R')
as.data.frame(0, matrix(ncol = length(not_in_data), nrow = nrow(mut)))
source('~/r-studio-charliecloud-master-b76b94e8c5040cd58fb0ffd1a463fd7409bb886e/dockerfile_dream_aml_sc1/input_data_functions.R')
import_dnaseq("~/research/dream_aml/dream_data_leaderboard/dnaseq.csv")
source('~/r-studio-charliecloud-master-b76b94e8c5040cd58fb0ffd1a463fd7409bb886e/dockerfile_dream_aml_sc1/input_data_functions.R')
import_dnaseq("~/research/dream_aml/dream_data_leaderboard/dnaseq.csv")
source('~/r-studio-charliecloud-master-b76b94e8c5040cd58fb0ffd1a463fd7409bb886e/dockerfile_dream_aml_sc1/input_data_functions.R')
source('~/r-studio-charliecloud-master-b76b94e8c5040cd58fb0ffd1a463fd7409bb886e/dockerfile_dream_aml_sc1/input_data_functions.R')
source('~/r-studio-charliecloud-master-b76b94e8c5040cd58fb0ffd1a463fd7409bb886e/dockerfile_dream_aml_sc1/input_data_functions.R')
import_dnaseq("~/research/dream_aml/dream_data_leaderboard/dnaseq.csv")
source('~/r-studio-charliecloud-master-b76b94e8c5040cd58fb0ffd1a463fd7409bb886e/dockerfile_dream_aml_sc1/input_data_functions.R')
import_dnaseq("~/research/dream_aml/dream_data_leaderboard/dnaseq.csv")
source('~/r-studio-charliecloud-master-b76b94e8c5040cd58fb0ffd1a463fd7409bb886e/dockerfile_dream_aml_sc1/input_data_functions.R')
test <- import_dnaseq("~/research/dream_aml/dream_data_leaderboard/dnaseq.csv")
source('~/r-studio-charliecloud-master-b76b94e8c5040cd58fb0ffd1a463fd7409bb886e/dockerfile_dream_aml_sc1/input_data_functions.R')
test <- import_dnaseq("~/research/dream_aml/dream_data_leaderboard/dnaseq.csv")
source('~/r-studio-charliecloud-master-b76b94e8c5040cd58fb0ffd1a463fd7409bb886e/dockerfile_dream_aml_sc1/input_data_functions.R')
source('~/r-studio-charliecloud-master-b76b94e8c5040cd58fb0ffd1a463fd7409bb886e/dockerfile_dream_aml_sc1/input_data_functions.R')
source('~/research/dream_aml/submission/sc1/input_data_functions.R')
test <- import_dnaseq("~/research/dream_aml/dream_data_leaderboard/dnaseq.csv")
source('~/research/dream_aml/submission/sc1/input_data_functions.R')
test <- import_dnaseq("~/research/dream_aml/dream_data_leaderboard/dnaseq.csv")
test <- import_dnaseq("~/research/dream_aml/dream_data/dnaseq.csv")
test <- import_dnaseq("~/research/dream_aml/dream_data/dnaseq.csv")
test <- import_dnaseq("~/research/dream_aml/dream_data/dnaseq.csv")
source('~/research/dream_aml/submission/sc1/input_data_functions.R')
test <- import_dnaseq("~/research/dream_aml/dream_data/dnaseq.csv")
source('~/research/dream_aml/submission/sc1/input_data_functions.R')
source('~/research/dream_aml/submission/sc1/input_data_functions.R')
test <- import_dnaseq("~/research/dream_aml/dream_data/dnaseq.csv")
source('~/research/dream_aml/submission/sc1/input_data_functions.R')
source('~/research/dream_aml/submission/sc1/input_data_functions.R')
source('~/r-studio-charliecloud-master-b76b94e8c5040cd58fb0ffd1a463fd7409bb886e/dockerfile_dream_aml_sc1/input_data_functions.R')
source('~/research/dream_aml/submission/sc1/input_data_functions.R')
test <- import_dnaseq("~/research/dream_aml/dream_data/dnaseq.csv")
?pivot_wider
source('~/r-studio-charliecloud-master-b76b94e8c5040cd58fb0ffd1a463fd7409bb886e/dockerfile_dream_aml_sc1/input_data_functions.R')
test <- import_dnaseq("~/research/dream_aml/dream_data/dnaseq.csv")
source('~/r-studio-charliecloud-master-b76b94e8c5040cd58fb0ffd1a463fd7409bb886e/dockerfile_dream_aml_sc1/input_data_functions.R')
source('~/r-studio-charliecloud-master-b76b94e8c5040cd58fb0ffd1a463fd7409bb886e/dockerfile_dream_aml_sc1/input_data_functions.R')
test <- import_dnaseq("~/research/dream_aml/dream_data/dnaseq.csv")
rlang::last_error()
source('~/r-studio-charliecloud-master-b76b94e8c5040cd58fb0ffd1a463fd7409bb886e/dockerfile_dream_aml_sc1/input_data_functions.R')
rlang::last_error()
test <- import_dnaseq("~/research/dream_aml/dream_data/dnaseq.csv")
source('~/r-studio-charliecloud-master-b76b94e8c5040cd58fb0ffd1a463fd7409bb886e/dockerfile_dream_aml_sc1/input_data_functions.R')
source('~/r-studio-charliecloud-master-b76b94e8c5040cd58fb0ffd1a463fd7409bb886e/dockerfile_dream_aml_sc1/input_data_functions.R')
source('~/r-studio-charliecloud-master-b76b94e8c5040cd58fb0ffd1a463fd7409bb886e/dockerfile_dream_aml_sc1/input_data_functions.R')
test <- import_dnaseq("~/research/dream_aml/dream_data/dnaseq.csv")
source('~/r-studio-charliecloud-master-b76b94e8c5040cd58fb0ffd1a463fd7409bb886e/dockerfile_dream_aml_sc1/input_data_functions.R')
source('~/r-studio-charliecloud-master-b76b94e8c5040cd58fb0ffd1a463fd7409bb886e/dockerfile_dream_aml_sc1/input_data_functions.R')
test <- import_dnaseq("~/research/dream_aml/dream_data/dnaseq.csv")
source('~/r-studio-charliecloud-master-b76b94e8c5040cd58fb0ffd1a463fd7409bb886e/dockerfile_dream_aml_sc1/input_data_functions.R')
test <- import_dnaseq("~/research/dream_aml/dream_data/dnaseq.csv")
source('~/r-studio-charliecloud-master-b76b94e8c5040cd58fb0ffd1a463fd7409bb886e/dockerfile_dream_aml_sc1/input_data_functions.R')
test <- import_dnaseq("~/research/dream_aml/dream_data/dnaseq.csv")
test <- import_dnaseq("~/research/dream_aml/dream_data/dnaseq.csv")
source('~/r-studio-charliecloud-master-b76b94e8c5040cd58fb0ffd1a463fd7409bb886e/dockerfile_dream_aml_sc1/input_data_functions.R')
test <- import_dnaseq("~/research/dream_aml/dream_data/dnaseq.csv")
source('~/r-studio-charliecloud-master-b76b94e8c5040cd58fb0ffd1a463fd7409bb886e/dockerfile_dream_aml_sc1/input_data_functions.R')
source('~/r-studio-charliecloud-master-b76b94e8c5040cd58fb0ffd1a463fd7409bb886e/dockerfile_dream_aml_sc1/input_data_functions.R')
test <- import_dnaseq("~/research/dream_aml/dream_data/dnaseq.csv")
source('~/r-studio-charliecloud-master-b76b94e8c5040cd58fb0ffd1a463fd7409bb886e/dockerfile_dream_aml_sc1/input_data_functions.R')
test <- import_dnaseq("~/research/dream_aml/dream_data/dnaseq.csv")
source('~/r-studio-charliecloud-master-b76b94e8c5040cd58fb0ffd1a463fd7409bb886e/dockerfile_dream_aml_sc1/input_data_functions.R')
source('~/r-studio-charliecloud-master-b76b94e8c5040cd58fb0ffd1a463fd7409bb886e/dockerfile_dream_aml_sc1/input_data_functions.R')
source('~/r-studio-charliecloud-master-b76b94e8c5040cd58fb0ffd1a463fd7409bb886e/dockerfile_dream_aml_sc1/input_data_functions.R')
test <- import_dnaseq("~/research/dream_aml/dream_data/dnaseq.csv")
source('~/r-studio-charliecloud-master-b76b94e8c5040cd58fb0ffd1a463fd7409bb886e/dockerfile_dream_aml_sc1/input_data_functions.R')
source('~/r-studio-charliecloud-master-b76b94e8c5040cd58fb0ffd1a463fd7409bb886e/dockerfile_dream_aml_sc1/input_data_functions.R')
source('~/r-studio-charliecloud-master-b76b94e8c5040cd58fb0ffd1a463fd7409bb886e/dockerfile_dream_aml_sc1/input_data_functions.R')
source('~/r-studio-charliecloud-master-b76b94e8c5040cd58fb0ffd1a463fd7409bb886e/dockerfile_dream_aml_sc1/input_data_functions.R')
source('~/r-studio-charliecloud-master-b76b94e8c5040cd58fb0ffd1a463fd7409bb886e/dockerfile_dream_aml_sc1/input_data_functions.R')
test <- import_dnaseq("~/research/dream_aml/dream_data/dnaseq.csv")
source('~/r-studio-charliecloud-master-b76b94e8c5040cd58fb0ffd1a463fd7409bb886e/dockerfile_dream_aml_sc1/input_data_functions.R')
test <- import_dnaseq("~/research/dream_aml/dream_data/dnaseq.csv")
source('~/r-studio-charliecloud-master-b76b94e8c5040cd58fb0ffd1a463fd7409bb886e/dockerfile_dream_aml_sc1/input_data_functions.R')
test <- import_dnaseq("~/research/dream_aml/dream_data/dnaseq.csv")
source('~/r-studio-charliecloud-master-b76b94e8c5040cd58fb0ffd1a463fd7409bb886e/dockerfile_dream_aml_sc1/input_data_functions.R')
test <- import_dnaseq("~/research/dream_aml/dream_data/dnaseq.csv")
source('~/r-studio-charliecloud-master-b76b94e8c5040cd58fb0ffd1a463fd7409bb886e/dockerfile_dream_aml_sc1/input_data_functions.R')
test <- import_dnaseq("~/research/dream_aml/dream_data/dnaseq.csv")
source('~/r-studio-charliecloud-master-b76b94e8c5040cd58fb0ffd1a463fd7409bb886e/dockerfile_dream_aml_sc1/input_data_functions.R')
test <- import_dnaseq("~/research/dream_aml/dream_data/dnaseq.csv")
source('~/r-studio-charliecloud-master-b76b94e8c5040cd58fb0ffd1a463fd7409bb886e/dockerfile_dream_aml_sc1/input_data_functions.R')
source('~/r-studio-charliecloud-master-b76b94e8c5040cd58fb0ffd1a463fd7409bb886e/dockerfile_dream_aml_sc1/input_data_functions.R')
source('~/r-studio-charliecloud-master-b76b94e8c5040cd58fb0ffd1a463fd7409bb886e/dockerfile_dream_aml_sc1/input_data_functions.R')
test <- import_dnaseq("~/research/dream_aml/dream_data/dnaseq.csv")
source('~/r-studio-charliecloud-master-b76b94e8c5040cd58fb0ffd1a463fd7409bb886e/dockerfile_dream_aml_sc1/input_data_functions.R')
test <- import_dnaseq("~/research/dream_aml/dream_data/dnaseq.csv")
source('~/r-studio-charliecloud-master-b76b94e8c5040cd58fb0ffd1a463fd7409bb886e/dockerfile_dream_aml_sc1/input_data_functions.R')
test <- import_dnaseq("~/research/dream_aml/dream_data/dnaseq.csv")
?dmap()
?dmap
source('~/r-studio-charliecloud-master-b76b94e8c5040cd58fb0ffd1a463fd7409bb886e/dockerfile_dream_aml_sc1/input_data_functions.R')
test <- import_dnaseq("~/research/dream_aml/dream_data/dnaseq.csv")
source('~/r-studio-charliecloud-master-b76b94e8c5040cd58fb0ffd1a463fd7409bb886e/dockerfile_dream_aml_sc1/input_data_functions.R')
source('~/r-studio-charliecloud-master-b76b94e8c5040cd58fb0ffd1a463fd7409bb886e/dockerfile_dream_aml_sc1/input_data_functions.R')
test <- import_dnaseq("~/research/dream_aml/dream_data/dnaseq.csv")
source('~/r-studio-charliecloud-master-b76b94e8c5040cd58fb0ffd1a463fd7409bb886e/dockerfile_dream_aml_sc1/input_data_functions.R')
test <- import_dnaseq("~/research/dream_aml/dream_data/dnaseq.csv")
source('~/r-studio-charliecloud-master-b76b94e8c5040cd58fb0ffd1a463fd7409bb886e/dockerfile_dream_aml_sc1/input_data_functions.R')
test <- import_dnaseq("~/research/dream_aml/dream_data/dnaseq.csv")
200*80201
200*401
source('~/r-studio-charliecloud-master-b76b94e8c5040cd58fb0ffd1a463fd7409bb886e/dockerfile_dream_aml_sc1/input_data_functions.R')
200*401
test <- import_dnaseq("~/research/dream_aml/dream_data/dnaseq.csv")
source('~/r-studio-charliecloud-master-b76b94e8c5040cd58fb0ffd1a463fd7409bb886e/dockerfile_dream_aml_sc1/input_data_functions.R')
source('~/r-studio-charliecloud-master-b76b94e8c5040cd58fb0ffd1a463fd7409bb886e/dockerfile_dream_aml_sc1/input_data_functions.R')
test <- import_dnaseq("~/research/dream_aml/dream_data/dnaseq.csv")
source('~/r-studio-charliecloud-master-b76b94e8c5040cd58fb0ffd1a463fd7409bb886e/dockerfile_dream_aml_sc1/input_data_functions.R')
source('~/research/dream_aml/submission/sc1/input_data_functions.R')
test <- import_dnaseq("~/research/dream_aml/dream_data/dnaseq.csv")
source('~/research/dream_aml/submission/sc1/input_data_functions.R')
test <- import_dnaseq("~/research/dream_aml/dream_data/dnaseq.csv")
source('~/r-studio-charliecloud-master-b76b94e8c5040cd58fb0ffd1a463fd7409bb886e/dockerfile_dream_aml_sc1/input_data_functions.R')
head(test)
source('~/r-studio-charliecloud-master-b76b94e8c5040cd58fb0ffd1a463fd7409bb886e/dockerfile_dream_aml_sc1/input_data_functions.R')
head(test)
test <- import_dnaseq("~/research/dream_aml/dream_data/dnaseq.csv")
row.names(test)
source('~/r-studio-charliecloud-master-b76b94e8c5040cd58fb0ffd1a463fd7409bb886e/dockerfile_dream_aml_sc1/input_data_functions.R')
source('~/r-studio-charliecloud-master-b76b94e8c5040cd58fb0ffd1a463fd7409bb886e/dockerfile_dream_aml_sc1/input_data_functions.R')
row.names(test)
source('~/r-studio-charliecloud-master-b76b94e8c5040cd58fb0ffd1a463fd7409bb886e/dockerfile_dream_aml_sc1/input_data_functions.R')
test <- import_dnaseq("~/research/dream_aml/dream_data/dnaseq.csv")
source('~/r-studio-charliecloud-master-b76b94e8c5040cd58fb0ffd1a463fd7409bb886e/dockerfile_dream_aml_sc1/input_data_functions.R')
test <- import_dnaseq("~/research/dream_aml/dream_data/dnaseq.csv")
colnames(test)
source('~/r-studio-charliecloud-master-b76b94e8c5040cd58fb0ffd1a463fd7409bb886e/dockerfile_dream_aml_sc1/input_data_functions.R')
colnames(test)
test <- import_dnaseq("~/research/dream_aml/dream_data/dnaseq.csv")
source('~/r-studio-charliecloud-master-b76b94e8c5040cd58fb0ffd1a463fd7409bb886e/dockerfile_dream_aml_sc1/input_data_functions.R')
test <- import_dnaseq("~/research/dream_aml/dream_data/dnaseq.csv")
source('~/r-studio-charliecloud-master-b76b94e8c5040cd58fb0ffd1a463fd7409bb886e/dockerfile_dream_aml_sc1/input_data_functions.R')
test <- import_dnaseq("~/research/dream_aml/dream_data/dnaseq.csv")
source('~/r-studio-charliecloud-master-b76b94e8c5040cd58fb0ffd1a463fd7409bb886e/dockerfile_dream_aml_sc1/input_data_functions.R')
source('~/r-studio-charliecloud-master-b76b94e8c5040cd58fb0ffd1a463fd7409bb886e/dockerfile_dream_aml_sc1/input_data_functions.R')
source('~/r-studio-charliecloud-master-b76b94e8c5040cd58fb0ffd1a463fd7409bb886e/dockerfile_dream_aml_sc1/input_data_functions.R')
test <- import_dnaseq("~/research/dream_aml/dream_data/dnaseq.csv")
source('~/r-studio-charliecloud-master-b76b94e8c5040cd58fb0ffd1a463fd7409bb886e/dockerfile_dream_aml_sc1/input_data_functions.R')
test <- import_dnaseq("~/research/dream_aml/dream_data/dnaseq.csv")
source('~/r-studio-charliecloud-master-b76b94e8c5040cd58fb0ffd1a463fd7409bb886e/dockerfile_dream_aml_sc1/input_data_functions.R')
source('~/r-studio-charliecloud-master-b76b94e8c5040cd58fb0ffd1a463fd7409bb886e/dockerfile_dream_aml_sc1/input_data_functions.R')
test <- import_dnaseq("~/research/dream_aml/dream_data/dnaseq.csv")
source('~/r-studio-charliecloud-master-b76b94e8c5040cd58fb0ffd1a463fd7409bb886e/dockerfile_dream_aml_sc1/input_data_functions.R')
test <- import_dnaseq("~/research/dream_aml/dream_data/dnaseq.csv")
source('~/r-studio-charliecloud-master-b76b94e8c5040cd58fb0ffd1a463fd7409bb886e/dockerfile_dream_aml_sc1/input_data_functions.R')
test <- import_dnaseq("~/research/dream_aml/dream_data/dnaseq.csv")
source('~/r-studio-charliecloud-master-b76b94e8c5040cd58fb0ffd1a463fd7409bb886e/dockerfile_dream_aml_sc1/input_data_functions.R')
test <- import_dnaseq("~/research/dream_aml/dream_data/dnaseq.csv")
source('~/r-studio-charliecloud-master-b76b94e8c5040cd58fb0ffd1a463fd7409bb886e/dockerfile_dream_aml_sc1/input_data_functions.R')
source('~/r-studio-charliecloud-master-b76b94e8c5040cd58fb0ffd1a463fd7409bb886e/dockerfile_dream_aml_sc1/input_data_functions.R')
test <- import_dnaseq("~/research/dream_aml/dream_data/dnaseq.csv")
source('~/r-studio-charliecloud-master-b76b94e8c5040cd58fb0ffd1a463fd7409bb886e/dockerfile_dream_aml_sc1/input_data_functions.R')
test <- import_dnaseq("~/research/dream_aml/dream_data/dnaseq.csv")
row.names(test)
source('~/r-studio-charliecloud-master-b76b94e8c5040cd58fb0ffd1a463fd7409bb886e/dockerfile_dream_aml_sc1/input_data_functions.R')
library(tidyr)
library(dplyr)
library(randomForest)
library(survival)
library(glmnet)
library(h2o)
library(Hmisc)
source("submission/sc1/input_data_functions.R")
source("R/general.R")
rna <- import_rnaseq("dream_data_leaderboard/rnaseq.csv")
mut <- import_dnaseq("dream_data_leaderboard/dnaseq.csv")
clin <- import_clin(path_num = "dream_data_leaderboard/clinical_numerical.csv",
path_cat = "dream_data_leaderboard/clinical_categorical.csv")
mod_rna_glm  <- loadRData("submission/sc1/models/rna-auc/glm_default.RData")
mod_rna_dnn  <- loadRData("submission/sc1/models/rna-auc/dnn_default.RData")
mod_rna_rf  <- loadRData("submission/sc1/models/rna-auc/rf_default.RData")
mod_mut_glm  <- loadRData("submission/sc1/models/mut-auc/glm_default.RData")
mod_mut_dnn  <- loadRData("submission/sc1/models/mut-auc/dnn_default.RData")
mod_mut_rf  <- loadRData("submission/sc1/models/mut-auc/rf_default.RData")
mod_clin_glm  <- loadRData("submission/sc1/models/clin-auc/glm_default.RData")
mod_clin_dnn  <- loadRData("submission/sc1/models/clin-auc/dnn_default.RData")
mod_clin_rf  <- loadRData("submission/sc1/models/clin-auc/rf_default.RData")
stacked_models <- loadRData("submission/sc1/models/stacked_models_sc1.RData")
inhibitor_name <- loadRData("submission/sc1/drug_names.RData")
lambda.min_rna <- loadRData("submission/sc1/models/rna-auc/glm_default_lambda.min.RData")
lambda.min_mut <- loadRData("submission/sc1/models/mut-auc/glm_default_lambda.min.RData")
lambda.min_clin <- loadRData("submission/sc1/models/clin-auc/glm_default_lambda.min.RData")
final_predict = list()
rna <- import_rnaseq("/input/rnaseq.csv")
rna <- import_rnaseq("dream_data_leaderboard/rnaseq.csv")
dim(rna)
dim(mut)
dim(clin)
library(tidyr)
library(dplyr)
library(randomForestSRC)
library(randomForest)
library(survival)
library(Hmisc)
source("submission/sc2/input_data_functions.R")
source("submission/sc2/general.R")
mod_rna  <- loadRData("submission/sc2/models
)
*)(*)
""
''
)
)))
")"
source("submission/sc2/input_data_functions.R")
source("submission/sc2/general.R")
auc <- import_aucs("/input/aucs.csv")
auc <- import_aucs("dream_data/aucs.csv")
library(tidyr)
library(dplyr)
library(randomForestSRC)
library(randomForest)
library(survival)
library(Hmisc)
auc <- import_aucs("dream_data/aucs.csv")
source('~/research/dream_aml/submission/sc2/input_data_functions.R')
auc <- import_aucs("dream_data/aucs.csv")
auc <- import_aucs("dream_data_leaderboard/aucs.csv")
source('~/research/dream_aml/submission/sc2/input_data_functions.R')
source('~/research/dream_aml/submission/sc2/input_data_functions.R')
source('~/research/dream_aml/submission/sc2/input_data_functions.R')
source('~/research/dream_aml/submission/sc2/input_data_functions.R')
source('~/research/dream_aml/submission/sc2/input_data_functions.R')
source('~/research/dream_aml/submission/sc2/input_data_functions.R')
source('~/research/dream_aml/submission/sc2/input_data_functions.R')
source('~/research/dream_aml/submission/sc2/input_data_functions.R')
source('~/research/dream_aml/submission/sc2/input_data_functions.R')
source('~/research/dream_aml/submission/sc2/input_data_functions.R')
source('~/research/dream_aml/submission/sc2/input_data_functions.R')
source('~/research/dream_aml/submission/sc2/input_data_functions.R')
source('~/research/dream_aml/submission/sc2/input_data_functions.R')
auc <- import_aucs("dream_data_leaderboard/aucs.csv")
source('~/research/dream_aml/submission/sc2/input_data_functions.R')
auc <- import_aucs("dream_data_leaderboard/aucs.csv")
source('~/research/dream_aml/submission/sc2/input_data_functions.R')
auc <- import_aucs("dream_data_leaderboard/aucs.csv")
source('~/research/dream_aml/submission/sc2/input_data_functions.R')
auc <- import_aucs("dream_data_leaderboard/aucs.csv")
?impute
source('~/research/dream_aml/submission/sc2/input_data_functions.R')
?impute
auc <- import_aucs("dream_data_leaderboard/aucs.csv")
source('~/research/dream_aml/submission/sc2/input_data_functions.R')
auc <- import_aucs("dream_data_leaderboard/aucs.csv")
source('~/research/dream_aml/submission/sc2/input_data_functions.R')
auc <- import_aucs("dream_data_leaderboard/aucs.csv")
test <- read.csv("dream_data_leaderboard/rnaseq.csv")
dim(test)
colnames(test)
source('~/research/dream_aml/submission/sc2/input_data_functions.R')
source('~/research/dream_aml/submission/sc2/input_data_functions.R')
source('~/research/dream_aml/submission/sc2/input_data_functions.R')
source('~/research/dream_aml/submission/sc2/input_data_functions.R')
source('~/research/dream_aml/submission/sc2/input_data_functions.R')
mut <- import_dnaseq("dream_data/dnaseq.csv")
dim(mut)
mut <- import_dnaseq("dream_data/dnaseq.csv")
dim(mut)
auc <- import_aucs("dream_data_leaderboard/aucs.csv")
dim(auc)
auc <- import_aucs("dream_data/aucs.csv")
dim(auc)
rna <- import_rnaseq("dream_data/rnaseq.csv")
dim(rna)
clin <- import_clin(path_num = "dream_data/clinical_numerical.csv",
path_cat = "dream_data/clinical_categorical.csv")
dim(clin)
mut <- import_dnaseq("dream_data/dnaseq.csv")
dim(mut)
source('~/research/dream_aml/submission/sc2/input_data_functions.R')
row.names(rna)
mut <- import_dnaseq("dream_data/dnaseq.csv")
row.names(samples %in% row.names(mut))
samples <- row.names(rna)
row.names(samples %in% row.names(mut))
samples %in% row.names(mut)
samples[samples %in% row.names(mut)]
samples[!samples %in% row.names(mut)]
mut
str(mut)
dim(matrix(nrow = length(missing_mut), ncol = ncol(mut)))
missing_mut <- samples[!samples %in% row.names(mut)]
dim(matrix(nrow = length(missing_mut), ncol = ncol(mut)))
mut <-
mut <- import_dnaseq("dream_data/dnaseq.csv")
missing_mut
samples <- row.names(rna)
missing_mut <- samples[!samples %in% row.names(mut)]
missing_zeros <- matrix(nrow = length(missing_mut), ncol = ncol(mut))
colnames(missing_zeros) = missing_mut
mut <- rbind(mut, missing_zeros)
mut <- import_dnaseq("dream_data/dnaseq.csv")
samples <- row.names(rna)
missing_mut <- samples[!samples %in% row.names(mut)]
missing_zeros <- matrix(nrow = length(missing_mut), ncol = ncol(mut))
colnames(missing_zeros) = missing_mut
mut <- rbind(mut, missing_zeros)
mut <- import_dnaseq("dream_data/dnaseq.csv")
samples <- row.names(rna)
missing_mut <- samples[!samples %in% row.names(mut)]
missing_mut
ncol(mut)
length(missing_mut)
missing_zeros <- matrix(nrow = length(missing_mut), ncol = ncol(mut))
row.names(missing_zeros) = missing_mut
mut <- rbind(mut, missing_zeros)
dim(mut)
row.names(mut)
clin <- import_clin(path_num = "dream_data/clinical_numerical.csv",
path_cat = "dream_data/clinical_categorical.csv")
dim(clin)
laod("dream_data_leaderboard/clinical_numerical.csv")
test <- read.csv("dream_data_leaderboard/clinical_numerical.csv")
test$lab_id
test <- read.csv("dream_data/clinical_numerical.csv")
test$lab_id
source('~/research/dream_aml/submission/sc2/input_data_functions.R')
source('~/research/dream_aml/submission/sc2/input_data_functions.R')
mod_clin  <- loadRData("submission/sc2/models/clin-surv/rfsurv_default.RData")
clin_feature = mod_clin$gene_names_filtered[[1]] %>% unlist()
clin <- import_clin(path_num = "dream_data/clinical_numerical.csv",
path_cat = "dream_data/clinical_categorical.csv")
source('~/research/dream_aml/submission/sc2/input_data_functions.R')
clin <- import_clin(path_num = "dream_data/clinical_numerical.csv",
path_cat = "dream_data/clinical_categorical.csv")
source('~/research/dream_aml/submission/sc2/input_data_functions.R')
source('~/research/dream_aml/submission/sc2/input_data_functions.R')
clin <- import_clin(path_num = "dream_data/clinical_numerical.csv",
path_cat = "dream_data/clinical_categorical.csv")
source('~/research/dream_aml/submission/sc2/input_data_functions.R')
clin <- import_clin(path_num = "dream_data/clinical_numerical.csv",
path_cat = "dream_data/clinical_categorical.csv")
dim(clin)
source('~/research/dream_aml/submission/sc2/input_data_functions.R')
rna <- import_rnaseq("dream_data/rnaseq.csv")
dim(rna)
auc <- import_aucs("dream_data/aucs.csv")
dim(auc)
source('~/research/dream_aml/submission/sc2/input_data_functions.R')
source('~/research/dream_aml/submission/sc2/input_data_functions.R')
rna <- import_rnaseq("dream_data/rnaseq.csv")
source('~/research/dream_aml/submission/sc2/input_data_functions.R')
source('~/research/dream_aml/submission/sc2/input_data_functions.R')
source('~/research/dream_aml/submission/sc2/input_data_functions.R')
rna <- import_rnaseq("dream_data/rnaseq.csv")
print(rna[1:10,1:10])
dim(rna)
apply(rna, 1, function(x) length(which(is.na(x))))
source('~/research/dream_aml/submission/sc2/input_data_functions.R')
source('~/research/dream_aml/submission/sc2/input_data_functions.R')
source('~/research/dream_aml/submission/sc2/input_data_functions.R')
source('~/research/dream_aml/submission/sc2/input_data_functions.R')
source('~/research/dream_aml/submission/sc1/input_data_functions.R')
rna <- import_rnaseq("dream_data/rnaseq.csv")
print(rna[1:10,1:10])
source("submission/sc2/input_data_functions.R")
source("submission/sc2/general.R")
mod_rna  <- loadRData("submission/sc2/models/rna-surv/rfsurv_default.RData")
mod_mut  <- loadRData("submission/sc2/models/mut-surv/rfsurv_default.RData")
mod_clin  <- loadRData("submission/sc2/models/clin-surv/rfsurv_default.RData")
mod_auc  <- loadRData("submission/sc2/models/auc-surv/rfsurv_default.RData")
rna <- import_rnaseq("dream_data/rnaseq.csv")
mut <- import_dnaseq("dream_data/dnaseq.csv")
samples <- row.names(rna)
missing_mut <- samples[!samples %in% row.names(mut)]
missing_zeros <- matrix(nrow = length(missing_mut), ncol = ncol(mut))
row.names(missing_zeros) = missing_mut
mut <- rbind(mut, missing_zeros)
clin <- import_clin(path_num = "dream_data/clinical_numerical.csv",
path_cat = "dream_data/clinical_categorical.csv")
auc <- import_aucs("dream_data/aucs.csv")
dim(auc)
dim(mut)
dim(rna)
dim(clin)
clin_feature = mod_clin$gene_names_filtered[[1]] %>% unlist()
clin_feature_miss = setdiff(clin_feature, colnames(clin))
clin_feature_mat = matrix( data = 0, nrow = nrow(clin), ncol = length(clin_feature_miss),
dimnames = list(row.names(clin), clin_feature_miss))
clin = cbind(clin, clin_feature_mat)
dim(clin)
stacked_models <- loadRData("submission/sc2/models/stacked_models_sc2.RData")
id = intersect(rownames(auc),intersect(rownames(clin), intersect(rownames(mut), rownames(rna))))
length(id)
clin = clin[id,]
mut = mut[id,]
rna = rna[id,]
auc = auc[id,]
predict_rna <- predict.rfsrc(mod_rna$param[[1]][[1]][[1]], newdata = as.data.frame(rna))$predicted; names(predict_rna)=row.names(rna)
predict_mut <- predict.rfsrc(mod_mut$param[[1]][[1]][[1]], newdata = as.data.frame(mut))$predicted; names(predict_mut)=row.names(mut)
row.names(mut)
predict_mut
predict_mut %>% length
dim(mut)
dim(as.data.frame(mut))
predict_clin <- predict.rfsrc(mod_clin$param[[1]][[1]][[1]], newdata = as.data.frame(clin))$predicted; names(predict_clin)=row.names(clin)
length(predict_clin)
View(mut)
samples <- row.names(rna)
samples
missing_mut <- samples[!samples %in% row.names(mut)]
missing_zeros <- matrix(nrow = length(missing_mut), ncol = ncol(mut))
missing_zeros <- matrix(0, nrow = length(missing_mut), ncol = ncol(mut))
missing_zeros
samples <- row.names(rna)
missing_mut <- samples[!samples %in% row.names(mut)]
missing_zeros <- matrix(0, nrow = length(missing_mut), ncol = ncol(mut))
row.names(missing_zeros) = missing_mut
mut <- rbind(mut, missing_zeros)
View(mut)
row.names(missing_zeros) = missing_mut
missing_zeros
length(missing_mut)
missing_mut
samples <- row.names(rna)
"
n
mut <- import_dnaseq("dream_data/dnaseq.csv")
samples <- row.names(rna)
missing_mut <- samples[!samples %in% row.names(mut)]
missing_zeros <- matrix(0, nrow = length(missing_mut), ncol = ncol(mut))
row.names(missing_zeros) = missing_mut
mut <- rbind(mut, missing_zeros)
View(mut)
clin <- import_clin(path_num = "dream_data/clinical_numerical.csv",
path_cat = "dream_data/clinical_categorical.csv")
dim(clin)
clin_feature = mod_clin$gene_names_filtered[[1]] %>% unlist()
clin_feature
clin_feature_miss = setdiff(clin_feature, colnames(clin))
clin_feature_miss
clin_feature_mat = matrix( data = 0, nrow = nrow(clin), ncol = length(clin_feature_miss),
dimnames = list(row.names(clin), clin_feature_miss))
clin_feature_mat
str(clin_feature_mat)
str(clin)
clin = cbind(clin, clin_feature_mat)
str(clin)
colnames(clin)
clin <- import_clin(path_num = "dream_data/clinical_numerical.csv",
path_cat = "dream_data/clinical_categorical.csv")
auc <- import_aucs("dream_data/aucs.csv")
clin_feature = mod_clin$gene_names_filtered[[1]] %>% unlist()
clin <- clin[,1:10]
clin_feature_miss = setdiff(clin_feature, colnames(clin))
clin_feature_miss
clin_feature_mat = matrix( data = 0, nrow = nrow(clin), ncol = length(clin_feature_miss),
dimnames = list(row.names(clin), clin_feature_miss))
clin_feature_mat
clin = cbind(clin, clin_feature_mat)
clind
clin
dim(clin)
mut <- import_dnaseq("dream_data/dnaseq.csv")
samples <- row.names(rna)
dim(mut)
missing_mut <- samples[!samples %in% row.names(mut)]
missing_mut
missing_zeros <- matrix(0, nrow = length(missing_mut), ncol = ncol(mut))
missing_zeros
row.names(missing_zeros) = missing_mut
mut <- rbind(mut, missing_zeros)
head(mut)
mut <- import_dnaseq("dream_data_leaderboard//dnaseq.csv")
samples <- row.names(rna)
missing_mut <- samples[!samples %in% row.names(mut)]
missing_zeros <- matrix(0, nrow = length(missing_mut), ncol = ncol(mut))
row.names(missing_zeros) = missing_mut
mut <- rbind(mut, missing_zeros)
dim(mut)
rna <- import_rnaseq("dream_data_leaderboard/rnaseq.csv")
dim(rna)
mut <- import_dnaseq("dream_data_leaderboard//dnaseq.csv")
samples <- row.names(rna)
missing_mut <- samples[!samples %in% row.names(mut)]
missing_zeros <- matrix(0, nrow = length(missing_mut), ncol = ncol(mut))
row.names(missing_zeros) = missing_mut
mut <- rbind(mut, missing_zeros)
dim(mut)
clin <- import_clin(path_num = "dream_data_leaderboard/clinical_numerical.csv",
path_cat = "dream_data_leaderboard/clinical_categorical.csv")
dim(clin)
auc <- import_aucs("dream_data/aucs.csv")
clin_feature = mod_clin$gene_names_filtered[[1]] %>% unlist()
clin_feature_miss = setdiff(clin_feature, colnames(clin))
clin_feature_mat = matrix( data = 0, nrow = nrow(clin), ncol = length(clin_feature_miss),
dimnames = list(row.names(clin), clin_feature_miss))
clin = cbind(clin, clin_feature_mat)
dim(clin)
clin_feature_miss
=======
full.names=TRUE)
array <- matrix(NA, nrow = 122, ncol = 9)
for(i in 1:length(list)){
array[,i] <- loadRData(list[i])
}
mean(array[,6], na.rm = T)
mean(array[,4], na.rm = T)
lapply(1:9, function(x) mean(array[,x], na.rm = T)) %>% unlist
dim(array)
lapply(1:122, function(x) max(array[x,], na.rm = T)) %>% unlist
lapply(1:122, function(x) max(array[x,], na.rm = T)) %>% unlist %>% hist
lapply(1:122, function(x) max(array[x,], na.rm = T)) %>% unlist %>% mean
lapply(1:122, function(x) which.max(array[x,], na.rm = T)) %>% unlist %>% mean
which.max()
which.max(c(1,2,3,4))
which.max(c(1,2,3,4,3))
which.max(c(1,2,3,3,3))
which.max(c(1,2,3,3,8))
lapply(1:122, function(x) which.max(array[x,], na.rm = T)) %>% unlist
lapply(1:122, function(x) which.max(array[x,])) %>% unlist
lapply(1:122, function(x) which.max(array[x,])) %>% hist
lapply(1:122, function(x) which.max(array[x,])) %>% unlist %>% hist
list
lapply(1:122, function(x) max(array[x,], na.rm = T)) %>% unlist %>% mean
lapply(1:122, function(x) max(array[x,], na.rm = T)) %>% unlist %>% length()
lapply(1:122, function(x) max(array[x,], na.rm = T)) %>% unlist %>% length
hist(array[11,])
hist(array[11,10])
hist(array[1,])
hist(array[2,])
hist(array[3,])
hist(array[4,])
hist(array[6,])
hist(array[7,])
hist(array[10,])
hist(array[15,])
list
mean(array[,9])
mean(array[,8])
array[,8]
### SCRIPT PARAMETER
directory <- "mut-rna" #"rna-auc"
descriptor <- "glm" #"stacked_models_sc1" # the descriptor does not care here #"rf"
model_object  <- loadRData(paste0("outputs/",directory,"/",descriptor,"_default_cv.RData"))
### SCRIPT PARAMETER
directory <- "rna-auc" #"rna-auc"
descriptor <- "glm" #"stacked_models_sc1" # the descriptor does not care here #"rf"
model_object  <- loadRData(paste0("outputs/",directory,"/",descriptor,"_default_cv.RData"))
model_object$score
####################
feature_path = paste0("features/",directory,"/",descriptor,"_features.RData") # path to features
response_path = paste0("features/",directory,"/",descriptor,"_response.RData") # path to response
feat <- get_features(feature_path)
resp <- get_features(response_path)
if(descriptor == "dnn"){h2o.init(ip = "localhost")}
preds_stack <- list()
for(y in 1:ncol(resp)){
if(descriptor == "glm"){model <- unlist(lapply(1:length(model_object$cv$test_sets), function(x) predict(model_object$param[[x,y]][[1]], newx = feat[model_object$cv$test_sets[[x]],model_object$gene_names_filtered[[x,y]][[1]]], s = 'lambda.min')[,1]))}
if(descriptor == "rf"){model <- unlist(lapply(1:length(model_object$cv$test_sets), function(x) predict(model_object$param[[x,y]][[1]], newdata = feat[model_object$cv$test_sets[[x]],model_object$gene_names_filtered[[x,y]][[1]]])))}
if(descriptor == "dnn"){model <- unlist(lapply(1:length(model_object$cv$test_sets), function(x) predict(h2o.loadModel(model_object$param[[x,y]][[1]]), newdata = as.h2o(feat[model_object$cv$test_sets[[x]],model_object$gene_names_filtered[[x,y]][[1]]]))%>%as.data.frame%>%unlist))}
if(descriptor == "stacked_models_sc1"){model <- unlist(lapply(1:length(model_object$cv$test_sets), function(x) predict(model_object$param[[x,y]][[1]], newdata = feat[[y]][model_object$cv$test_sets[[x]],model_object$gene_names_filtered[[x,y]][[1]]])))}
preds_stack[[y]] <- model
print(paste0(as.character(y/ncol(resp)*100),"%"))
}
preds_stack[[1]]
preds_stack[[3]]
preds_stack[[1]]
performance <- unlist(lapply(1:ncol(resp), function(y)
mean(unlist(lapply(1:10, function(x){names(preds_stack[[y]])=unlist(model_object$cv$test_sets);cor(preds_stack[[y]][model_object$cv$test_sets[[x]]], resp[model_object$cv$test_sets[[x]],y], use = "complete.obs")})))
))
warnings()
preds_stack[[3]][model_object$cv$test_sets[[1]]]
preds_stack[[3]][model_object$cv$test_sets[[2]]]
preds_stack[[3]][model_object$cv$test_sets[[3]]]
preds_stack[[3]][model_object$cv$test_sets[[4]]]
preds_stack[[3]][model_object$cv$test_sets[[5]]]
preds_stack[[3]][model_object$cv$test_sets[[6]]]
x <- 1
y <- 34
y <- 3
mean(unlist(lapply(1:10, function(x){names(preds_stack[[y]])=unlist(model_object$cv$test_sets);cor(preds_stack[[y]][model_object$cv$test_sets[[x]]], resp[model_object$cv$test_sets[[x]],y], use = "complete.obs")})))
performance <- unlist(lapply(1:ncol(resp), function(y){
tmp <- mean(unlist(lapply(1:10, function(x){names(preds_stack[[y]])=unlist(model_object$cv$test_sets);cor(preds_stack[[y]][model_object$cv$test_sets[[x]]], resp[model_object$cv$test_sets[[x]],y], use = "complete.obs")})));
if(is.na(tmp)){tmp <- 0}
}))
warnings
warnings()
performance
performance <- unlist(lapply(1:ncol(resp), function(y){
tmp <- mean(unlist(lapply(1:10, function(x){names(preds_stack[[y]])=unlist(model_object$cv$test_sets);cor(preds_stack[[y]][model_object$cv$test_sets[[x]]], resp[model_object$cv$test_sets[[x]],y], use = "complete.obs")})));
if(is.na(tmp)){tmp <- 0}else{tmp}
}))
mean(performance, na.rm = T)
### SCRIPT PARAMETER
directory <- "clin-auc" #"rna-auc"
descriptor <- "glm" #"stacked_models_sc1" # the descriptor does not care here #"rf"
model_object  <- loadRData(paste0("outputs/",directory,"/",descriptor,"_default_cv.RData"))
####################
feature_path = paste0("features/",directory,"/",descriptor,"_features.RData") # path to features
response_path = paste0("features/",directory,"/",descriptor,"_response.RData") # path to response
feat <- get_features(feature_path)
resp <- get_features(response_path)
if(descriptor == "dnn"){h2o.init(ip = "localhost")}
preds_stack <- list()
for(y in 1:ncol(resp)){
if(descriptor == "glm"){model <- unlist(lapply(1:length(model_object$cv$test_sets), function(x) predict(model_object$param[[x,y]][[1]], newx = feat[model_object$cv$test_sets[[x]],model_object$gene_names_filtered[[x,y]][[1]]], s = 'lambda.min')[,1]))}
if(descriptor == "rf"){model <- unlist(lapply(1:length(model_object$cv$test_sets), function(x) predict(model_object$param[[x,y]][[1]], newdata = feat[model_object$cv$test_sets[[x]],model_object$gene_names_filtered[[x,y]][[1]]])))}
if(descriptor == "dnn"){model <- unlist(lapply(1:length(model_object$cv$test_sets), function(x) predict(h2o.loadModel(model_object$param[[x,y]][[1]]), newdata = as.h2o(feat[model_object$cv$test_sets[[x]],model_object$gene_names_filtered[[x,y]][[1]]]))%>%as.data.frame%>%unlist))}
if(descriptor == "stacked_models_sc1"){model <- unlist(lapply(1:length(model_object$cv$test_sets), function(x) predict(model_object$param[[x,y]][[1]], newdata = feat[[y]][model_object$cv$test_sets[[x]],model_object$gene_names_filtered[[x,y]][[1]]])))}
preds_stack[[y]] <- model
print(paste0(as.character(y/ncol(resp)*100),"%"))
}
performance <- unlist(lapply(1:ncol(resp), function(y){
tmp <- mean(unlist(lapply(1:10, function(x){names(preds_stack[[y]])=unlist(model_object$cv$test_sets);cor(preds_stack[[y]][model_object$cv$test_sets[[x]]], resp[model_object$cv$test_sets[[x]],y], use = "complete.obs")})));
if(is.na(tmp)){tmp <- 0}else{tmp}
}))
mean(performance, na.rm = T)
save(performance, file = paste0("outputs/performances/",directory,"_",descriptor,"_performance.RData"))
### SC1
library(glmnet)
library(h2o)
library(dplyr)
### SCRIPT PARAMETER
directory <- "mut-auc" #"rna-auc"
descriptor <- "glm" #"stacked_models_sc1" # the descriptor does not care here #"rf"
model_object  <- loadRData(paste0("outputs/",directory,"/",descriptor,"_default_cv.RData"))
####################
feature_path = paste0("features/",directory,"/",descriptor,"_features.RData") # path to features
response_path = paste0("features/",directory,"/",descriptor,"_response.RData") # path to response
feat <- get_features(feature_path)
resp <- get_features(response_path)
if(descriptor == "dnn"){h2o.init(ip = "localhost")}
preds_stack <- list()
for(y in 1:ncol(resp)){
if(descriptor == "glm"){model <- unlist(lapply(1:length(model_object$cv$test_sets), function(x) predict(model_object$param[[x,y]][[1]], newx = feat[model_object$cv$test_sets[[x]],model_object$gene_names_filtered[[x,y]][[1]]], s = 'lambda.min')[,1]))}
if(descriptor == "rf"){model <- unlist(lapply(1:length(model_object$cv$test_sets), function(x) predict(model_object$param[[x,y]][[1]], newdata = feat[model_object$cv$test_sets[[x]],model_object$gene_names_filtered[[x,y]][[1]]])))}
if(descriptor == "dnn"){model <- unlist(lapply(1:length(model_object$cv$test_sets), function(x) predict(h2o.loadModel(model_object$param[[x,y]][[1]]), newdata = as.h2o(feat[model_object$cv$test_sets[[x]],model_object$gene_names_filtered[[x,y]][[1]]]))%>%as.data.frame%>%unlist))}
if(descriptor == "stacked_models_sc1"){model <- unlist(lapply(1:length(model_object$cv$test_sets), function(x) predict(model_object$param[[x,y]][[1]], newdata = feat[[y]][model_object$cv$test_sets[[x]],model_object$gene_names_filtered[[x,y]][[1]]])))}
preds_stack[[y]] <- model
print(paste0(as.character(y/ncol(resp)*100),"%"))
}
performance <- unlist(lapply(1:ncol(resp), function(y){
tmp <- mean(unlist(lapply(1:10, function(x){names(preds_stack[[y]])=unlist(model_object$cv$test_sets);cor(preds_stack[[y]][model_object$cv$test_sets[[x]]], resp[model_object$cv$test_sets[[x]],y], use = "complete.obs")})));
if(is.na(tmp)){tmp <- 0}else{tmp}
}))
mean(performance, na.rm = T)
save(performance, file = paste0("outputs/performances/",directory,"_",descriptor,"_performance.RData"))
if(FALSE){
list <- list.files("/storage/groups/cbm01/workspace/dream_aml/outputs/performances/", pattern=".RData", all.files=FALSE, #meth, gex
full.names=TRUE)
array <- matrix(NA, nrow = 122, ncol = 9)
for(i in 1:length(list)){
array[,i] <- loadRData(list[i])
}
}
list <- list.files("/storage/groups/cbm01/workspace/dream_aml/outputs/performances/", pattern=".RData", all.files=FALSE, #meth, gex
full.names=TRUE)
array <- matrix(NA, nrow = 122, ncol = 9)
for(i in 1:length(list)){
array[,i] <- loadRData(list[i])
}
lapply(1:122, function(x) which.max(array[x,])) %>% unlist %>% hist
lapply(1:122, function(x) max(array[x,])) %>% unlist %>% mean
dim(array)
lapply(1:122, function(x) max(array[x,])) %>% unlist
lapply(1:122, function(x) max(array[x,]), na.rm = T) %>% unlist
head(array)
list
lapply(1:122, function(x) max(array[x,]), na.rm = T) %>% unlist
lapply(1:122, function(x) max(array[x,])) %>% unlist
View(array)
lapply(1:122, function(x) max(na.rm(array[x,]))) %>% unlist
lapply(1:122, function(x) max(na.omit(array[x,]))) %>% unlist
lapply(1:122, function(x) max(na.omit(array[x,]))) %>% unlist %>% mean
lapply(1:122, function(x) max(na.omit(array[x,]))) %>% unlist %>% mean
list
hist(array[,11])
hist(array[,4])
hist(array[,5])
lapply(1:122, function(x) max(na.omit(array[x,]))) %>% unlist %>% mean
lapply(1:122, function(x) max(na.omit(array[x,]))) %>% unlist
lapply(1:122, function(x) max.which(na.omit(array[x,]))) %>% unlist %>% table
lapply(1:122, function(x) which.max(na.omit(array[x,]))) %>% unlist %>% table
list
lapply(1:122, function(x) which.max(na.omit(array[x,]))) %>% unlist %>% table %>% hist
lapply(1:122, function(x) which.max(na.omit(array[x,]))) %>% unlist%>% hist
### SCRIPT PARAMETER
directory <- "" #"rna-auc"
descriptor <- "stacked_models_sc1" # the descriptor does not care here #"rf"
model_object  <- loadRData(paste0("outputs/",directory,"/",descriptor,"_default_cv.RData"))
####################
feature_path = paste0("features/",directory,"/",descriptor,"_features.RData") # path to features
response_path = paste0("features/",directory,"/",descriptor,"_response.RData") # path to response
feat <- get_features(feature_path)
resp <- get_features(response_path)
if(descriptor == "dnn"){h2o.init(ip = "localhost")}
preds_stack <- list()
for(y in 1:ncol(resp)){
if(descriptor == "glm"){model <- unlist(lapply(1:length(model_object$cv$test_sets), function(x) predict(model_object$param[[x,y]][[1]], newx = feat[model_object$cv$test_sets[[x]],model_object$gene_names_filtered[[x,y]][[1]]], s = 'lambda.min')[,1]))}
if(descriptor == "rf"){model <- unlist(lapply(1:length(model_object$cv$test_sets), function(x) predict(model_object$param[[x,y]][[1]], newdata = feat[model_object$cv$test_sets[[x]],model_object$gene_names_filtered[[x,y]][[1]]])))}
if(descriptor == "dnn"){model <- unlist(lapply(1:length(model_object$cv$test_sets), function(x) predict(h2o.loadModel(model_object$param[[x,y]][[1]]), newdata = as.h2o(feat[model_object$cv$test_sets[[x]],model_object$gene_names_filtered[[x,y]][[1]]]))%>%as.data.frame%>%unlist))}
if(descriptor == "stacked_models_sc1"){model <- unlist(lapply(1:length(model_object$cv$test_sets), function(x) predict(model_object$param[[x,y]][[1]], newdata = feat[[y]][model_object$cv$test_sets[[x]],model_object$gene_names_filtered[[x,y]][[1]]])))}
preds_stack[[y]] <- model
print(paste0(as.character(y/ncol(resp)*100),"%"))
}
performance <- unlist(lapply(1:ncol(resp), function(y){
tmp <- mean(unlist(lapply(1:10, function(x){names(preds_stack[[y]])=unlist(model_object$cv$test_sets);cor(preds_stack[[y]][model_object$cv$test_sets[[x]]], resp[model_object$cv$test_sets[[x]],y], use = "complete.obs")})));
if(is.na(tmp)){tmp <- 0}else{tmp}
}))
hist(performance)
dim(feat)
dim(feat[[1]])
dim(feat[[2]])
dev.off()
### SCRIPT PARAMETER
directory <- "" #"rna-auc"
descriptor <- "stacked_models_sc1" # the descriptor does not care here #"rf"
model_object  <- loadRData(paste0("outputs/",directory,"/",descriptor,"_default_cv.RData"))
model_object$score
model_object$param[[1]]
model_object$param[[1,1]]
dim(feat)
paste0("features/",directory,"/",descriptor,"_features_update.RData")
load(paste0("features/",directory,"/",descriptor,"_features_update.RData"))
R.object[[1]]
R.object[[1]] %>% dim
library(dplyr)
R.object[[1]] %>% dim
R.object[[2]] %>% dim
191/10*9
lapply(R.object[[1]], function(x) length(which(cx)))
lapply(R.object[[1]], function(x) length(which(x)))
lapply(R.object[[1]], function(x) length(which(is.na(x))))
lapply(R.object[[1]], function(x) length(which(is.na(x)))) %>% unlist
lapply(R.object[[1]], function(x) length(which(is.na(x)))) %>% unlist %>% sum
lapply(R.object[[3]], function(x) length(which(is.na(x)))) %>% unlist %>% sum
lapply(R.object[[5]], function(x) length(which(is.na(x)))) %>% unlist %>% sum
191/10*9/10*9
### SCRIPT PARAMETER
directory <- "mut-surv" #"rna-auc"
descriptor <- "rfsurv"#"stacked_models_sc1" # the descriptor does not care here #"rf"
model_object  <- loadRData(paste0("outputs/",directory,"/",descriptor,"_default_cv.RData"))
### SCRIPT PARAMETER
directory <- "mut-surv" #"rna-auc"
descriptor <- "cox"#"stacked_models_sc1" # the descriptor does not care here #"rf"
model_object  <- loadRData(paste0("outputs/",directory,"/",descriptor,"_default_cv.RData"))
####################
feature_path = paste0("features/",directory,"/",descriptor,"_features.RData") # path to features
response_path = paste0("features/",directory,"/",descriptor,"_response.RData") # path to response
feat <- get_features(feature_path)
resp <- get_features(response_path)
if(descriptor == "dnn"){h2o.init(ip = "localhost")}
preds_stack <- list()
for(y in 1:ncol(resp)){
if(descriptor == "glm"){model <- unlist(lapply(1:length(model_object$cv$test_sets), function(x) predict(model_object$param[[x,y]][[1]], newx = feat[model_object$cv$test_sets[[x]],model_object$gene_names_filtered[[x,y]][[1]]], s = 'lambda.min')[,1]))}
if(descriptor == "rf"){model <- unlist(lapply(1:length(model_object$cv$test_sets), function(x) predict(model_object$param[[x,y]][[1]], newdata = feat[model_object$cv$test_sets[[x]],model_object$gene_names_filtered[[x,y]][[1]]])))}
if(descriptor == "dnn"){model <- unlist(lapply(1:length(model_object$cv$test_sets), function(x) predict(h2o.loadModel(model_object$param[[x,y]][[1]]), newdata = as.h2o(feat[model_object$cv$test_sets[[x]],model_object$gene_names_filtered[[x,y]][[1]]]))%>%as.data.frame%>%unlist))}
if(descriptor == "stacked_models_sc1"){model <- unlist(lapply(1:length(model_object$cv$test_sets), function(x) predict(model_object$param[[x,y]][[1]], newdata = feat[[y]][model_object$cv$test_sets[[x]],model_object$gene_names_filtered[[x,y]][[1]]])))}
preds_stack[[y]] <- model
print(paste0(as.character(y/ncol(resp)*100),"%"))
}
model_object
#!/usr/bin/env Rscript
setwd("/storage/groups/cbm01/workspace/dream_aml/")
args <- as.numeric(commandArgs(trailingOnly = TRUE)); args <- args # get the submission script argument
print("Arguments:")
print(args)
library(survcomp)
#args <- 1 # TEMPORALY LOCALLY NEEDED FOR TESTING
## Alex' Models
## note that our docker image is using r3.6.1
source("R/learning.R")
source("R/run_pipeline.R")
source("R/feature_selection.R")
source("R/algorithms.R")
source("R/general.R")
#### how to run on cluster
# ./SUBMIT.sh PIPELINE.R numberofargs 1
#args <- args[1] #<- new command
print(paste0("Running with argument: ",as.character(args)))
### SCRIPT PARAMETER
directory <- "mut-surv"#"mut" #"rna"
descriptor <- "cox" # the descriptor means the method in this script, not the same as in PREPROCESS.R
mtry <- seq(from= 1, to= 40, by= 3) #rna: c(10,20,40,70,seq(from= 100, to= 1000, by= 100))
ntree <- seq(from=100, to= 1000, by = 100)
combos <- expand.grid(mtry, ntree) %>% t
combos_local <- cut_df(df = combos, totaln = 40, index = args)
print(ncol(combos_local))
args <- 1
if(descriptor == "cox"){param <-  c("alpha"=0.5)}
cvscore <- c()
load(paste0("features/",directory,"/",descriptor,"_response_",as.character(1),".RData"))
R.object
test <- read.csv("dream_data/response.csv")
head(test)
Surv(R.object)
Surv(time = R.object[,2], event = R.object[,1])
summary(Surv(time = R.object[,2], event = R.object[,1]))
?Surv
table()test$vitalStatus)
table(test$vitalStatus)
survfit(Surv(time = R.object[,2], event = R.object[,1]))
coxph(Surv(time = R.object[,2], event = R.object[,1]))
coxph(Surv(time = R.object[,2], event = R.object[,1])~1)
survfit(coxph(Surv(time = R.object[,2], event = R.object[,1])~1))
table(test$vitalStatus)
dim(test)
dim(R.object)
test <- read.csv("dream_data_leaderboard/response.csv")
table(test$vitalStatus)
36+86
dim(test)
resp <- read.csv("features_validation/survival/response_full.csv",sep=",")
dim(resp)
73 + 250
View(df)
dim(resp)
table(resp$vitalStatus)
survfit(coxph(Surv(time = R.object[,2], event = R.object[,1])~1))
table(R.object[,1])
resp <- read.csv("features_validation/survival/response_full.csv",sep=",")
resp_original <- read.csv("dream_data_leaderboard/response.csv")
resp <- resp[,-1] # not in original
row.names(resp) = make.names(resp$lab_id)
resp <- resp[,-1]
resp$vitalStatus <- as.character(resp$vitalStatus)
resp$vitalStatus[resp$vitalStatus == "Alive"] <- 0
resp$vitalStatus[resp$vitalStatus == "Dead"] <- 1
resp$vitalStatus <- as.numeric(resp$vitalStatus)
resp <- resp[resp$overallSurvival != 0,]
table(resp[,1])
survfit(coxph(Surv(time = resp[,2], event = resp[,1])~1))
directory <- "clin-surv"#"mut" #"rna"
descriptor <- directory
feature_path = paste0("features/",directory,"/",descriptor,"_features.RData") # path to features
response_path = paste0("features/",directory,"/",descriptor,"_response.RData") # path to response
feature_path
resp <- read.csv("features_validation/survival/response_full.csv",sep=",")
resp_original <- read.csv("dream_data_leaderboard/response.csv")
resp <- resp[,-1] # not in original
row.names(resp) = make.names(resp$lab_id)
resp <- resp[,-1]
resp$vitalStatus <- as.character(resp$vitalStatus)
resp$vitalStatus[resp$vitalStatus == "Alive"] <- 0
resp$vitalStatus[resp$vitalStatus == "Dead"] <- 1
resp$vitalStatus <- as.numeric(resp$vitalStatus)
resp <- resp[resp$overallSurvival != 0,]
directory <- "clin-surv"#"mut" #"rna"
descriptor <- directory
feature_path = paste0("features/",directory,"/",descriptor,"_features.RData") # path to features
response_path = paste0("features/",directory,"/",descriptor,"_response.RData") # path to response
feature_path
response_path
save(resp, file = response_path)
directory <- "mut-surv"#"mut" #"rna"
descriptor <- directory
feature_path = paste0("features/",directory,"/",descriptor,"_features.RData") # path to features
response_path = paste0("features/",directory,"/",descriptor,"_response.RData") # path to response
feature_path
response_path
save(resp, file = response_path)
directory <- "rna-surv"#"mut" #"rna"
descriptor <- directory
feature_path = paste0("features/",directory,"/",descriptor,"_features.RData") # path to features
response_path = paste0("features/",directory,"/",descriptor,"_response.RData") # path to response
feature_path
response_path
save(resp, file = response_path)
directory <- "auc-surv"#"mut" #"rna"
descriptor <- directory
feature_path = paste0("features/",directory,"/",descriptor,"_features.RData") # path to features
response_path = paste0("features/",directory,"/",descriptor,"_response.RData") # path to response
feature_path
response_path
save(resp, file = response_path)
median(c(0,0))
median(c(0,0,1))
median(c(0,0,0,1))
median(c(0,0,1,1))
a <- 10
plot(c(0,1), c(0,1), type = 'n', ann = FALSE, xaxt = 'n', yaxt = 'n')
text(0.2, 0.6, cex = 1.5, bquote(paste('S'['f']*' = ', .(a))))
dev.off()
if(descriptor == "cox"){param <-  c("alpha"=0.5)}
descriptor
### SCRIPT PARAMETER
directory <- "mut-surv"#"mut" #"rna"
descriptor <- "cox" # the descriptor means the method in this script, not the same as in PREPROCESS.R
mtry <- c(seq(from= 1, to= 10, by= 3),20,27,35,40) #rna: c(10,20,40,70,seq(from= 100, to= 1000, by= 100))
ntree <- c(100, 200, 500, 1000)
param <- list(mtry,ntree)
if(descriptor == "cox"){param <-  c("alpha"=0.5)}
param
#clin:param=list(c(10),c(500))
#mut:param=list(c(16),c(100))
#auc:param=list(c(),)
####################
if(descriptor=="dnn"){h2o.init(port=8508)}
models_list <- run_pipeline_benchmark(
feature_path = paste0("features/",directory,"/",descriptor,"_features.RData"), # path to features
response_path = paste0("features/",directory,"/",descriptor,"_response_",as.character(1),".RData"), # path to response, all the same for survival
submission = T,
kfold = 10,
method = c(descriptor),
hyperparam = param,
cvglm = T,
returnFit = T, # if false, then it only returns the lambda
cvseed = 1, #CV-seed for tuning was set to 1, setting 2 for creating the stacking features !
FUN = AnvSigSurvFeature,
args = args
)
### SCRIPT PARAMETER
directory <- "clin-surv"#"mut" #"rna"
descriptor <- "cox" # the descriptor means the method in this script, not the same as in PREPROCESS.R
mtry <- c(seq(from= 1, to= 10, by= 3),20,27,35,40) #rna: c(10,20,40,70,seq(from= 100, to= 1000, by= 100))
ntree <- c(100, 200, 500, 1000)
param <- list(mtry,ntree)
if(descriptor == "cox"){param <-  c("alpha"=0.5)}
#clin:param=list(c(10),c(500))
#mut:param=list(c(16),c(100))
#auc:param=list(c(),)
####################
if(descriptor=="dnn"){h2o.init(port=8508)}
models_list <- run_pipeline_benchmark(
feature_path = paste0("features/",directory,"/",descriptor,"_features.RData"), # path to features
response_path = paste0("features/",directory,"/",descriptor,"_response_",as.character(1),".RData"), # path to response, all the same for survival
submission = T,
kfold = 10,
method = c(descriptor),
hyperparam = param,
cvglm = T,
returnFit = T, # if false, then it only returns the lambda
cvseed = 1, #CV-seed for tuning was set to 1, setting 2 for creating the stacking features !
FUN = AnvSigSurvFeature,
args = args
)
### SCRIPT PARAMETER
directory <- "rna-surv"#"mut" #"rna"
descriptor <- "cox" # the descriptor means the method in this script, not the same as in PREPROCESS.R
mtry <- c(seq(from= 1, to= 10, by= 3),20,27,35,40) #rna: c(10,20,40,70,seq(from= 100, to= 1000, by= 100))
ntree <- c(100, 200, 500, 1000)
param <- list(mtry,ntree)
if(descriptor == "cox"){param <-  c("alpha"=0.5)}
models_list <- run_pipeline_benchmark(
feature_path = paste0("features/",directory,"/",descriptor,"_features.RData"), # path to features
response_path = paste0("features/",directory,"/",descriptor,"_response_",as.character(1),".RData"), # path to response, all the same for survival
submission = T,
kfold = 10,
method = c(descriptor),
hyperparam = param,
cvglm = T,
returnFit = T, # if false, then it only returns the lambda
cvseed = 1, #CV-seed for tuning was set to 1, setting 2 for creating the stacking features !
FUN = AnvSigSurvFeature,
args = args
)
mtry <- c(seq(from= 1, to= 10, by= 2),20,27,35,40) #rna: c(10,20,40,70,seq(from= 100, to= 1000, by= 100))
ntree <- c(100, 200, 500, 1000)
grid <- expand_grid(mtry, ntree)%>%as.data.frame
#param <- list(mtry,ntree)
param <- lapply(1:nrow(grid), function(x) list(grid[x,1],grid[x,2]))[[args]]
dim(grid)
mtry <- c(seq(from= 1, to= 10, by= 2),20,27,35,40) #rna: c(10,20,40,70,seq(from= 100, to= 1000, by= 100))
ntree <- c(100, 200, 500, 1000)
grid <- expand_grid(mtry, ntree)%>%as.data.frame
library(dplyr)
mtry <- c(seq(from= 1, to= 10, by= 2),20,27,35,40) #rna: c(10,20,40,70,seq(from= 100, to= 1000, by= 100))
ntree <- c(100, 200, 500, 1000)
grid <- expand_grid(mtry, ntree)%>%as.data.frame
#!/usr/bin/env Rscript
setwd("/storage/groups/cbm01/workspace/dream_aml/")
args <- as.numeric(commandArgs(trailingOnly = TRUE)); args <- args # get the submission script argument
print("Arguments:")
print(args)
#args <- 1 # TEMPORALY LOCALLY NEEDED FOR TESTING
## Alex' Models
## note that our docker image is using r3.6.1
source("R/learning.R")
source("R/run_pipeline.R")
source("R/feature_selection.R")
library(survcomp)
library(tidyr)
source("R/algorithms.R")
source("R/general.R")
mtry <- c(seq(from= 1, to= 10, by= 2),20,27,35,40) #rna: c(10,20,40,70,seq(from= 100, to= 1000, by= 100))
ntree <- c(100, 200, 500, 1000)
grid <- expand_grid(mtry, ntree)%>%as.data.frame
dim(grid)
grid[18,]
test <- get_features(paste0("features/",directory,"/",descriptor,"_features.RData"))
### SCRIPT PARAMETER
directory <- "all-surv"#"mut" #"rna"
descriptor <- "rfsurv" # the descriptor means the method in this script, not the same as in PREPROCESS.R
test <- get_features(paste0("features/",directory,"/",descriptor,"_features.RData"))
colnames(test)[1:40]
test <- test[,-c(1:40)]
colnames(test)[1:40]
dim(rna)
dim(test)
colnames(test)[63377:ncol(test)]
colnames(test)[(63377+375):ncol(test)]
colnames(test)[(63377+375):ncol(test)] %>% length
test <- test[,-c((63377+375):ncol(test))]
dim(test)
dim(rna)
dump_features(test, path = )
paste0("features/",directory,"/",descriptor,"_features.RData")
dump_features(test, path = "features/rnaclin-surv/rfsurv_features.RData")
#!/usr/bin/env Rscript
setwd("/storage/groups/cbm01/workspace/dream_aml/")
dump_features(test, path = "features/rnaclin-surv/rfsurv_features.RData")
dump_features(test, path = "features/rnaclin-surv/rfsurv_features.RData")
>>>>>>> 72e7f0a8fc878da0a5a4f7b6ca2839968dadd75e
